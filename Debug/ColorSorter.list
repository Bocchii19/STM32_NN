
ColorSorter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002924  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  08006404  08006404  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006404  08006404  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800640c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000064  08006470  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08006470  000086a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eef4  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff7  00000000  00000000  00016f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00018f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c50  00000000  00000000  00019ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018285  00000000  00000000  0001ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012075  00000000  00000000  00032dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d68d  00000000  00000000  00044e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d24cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  000d2514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d6b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ac8 	.word	0x08003ac8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003ac8 	.word	0x08003ac8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 ff63 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f877 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f971 	bl	8000a34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000752:	f000 f8b3 	bl	80008bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000756:	f000 f8df 	bl	8000918 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800075a:	f000 f941 	bl	80009e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800075e:	f000 fb6d 	bl	8000e3c <SSD1306_Init>
  TCS3200_Init();
 8000762:	f000 fb29 	bl	8000db8 <TCS3200_Init>
  uint32_t rgb[3] = {0, 136, 255};
 8000766:	4a2f      	ldr	r2, [pc, #188]	@ (8000824 <main+0xe4>)
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    input_nn[0] = (float)rgb[0] / 255.0f;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd9f 	bl	80002b8 <__aeabi_ui2f>
 800077a:	4603      	mov	r3, r0
 800077c:	492a      	ldr	r1, [pc, #168]	@ (8000828 <main+0xe8>)
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fea6 	bl	80004d0 <__aeabi_fdiv>
 8000784:	4603      	mov	r3, r0
 8000786:	60fb      	str	r3, [r7, #12]
	    input_nn[1] = (float)rgb[1] / 255.0f;
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd94 	bl	80002b8 <__aeabi_ui2f>
 8000790:	4603      	mov	r3, r0
 8000792:	4925      	ldr	r1, [pc, #148]	@ (8000828 <main+0xe8>)
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fe9b 	bl	80004d0 <__aeabi_fdiv>
 800079a:	4603      	mov	r3, r0
 800079c:	613b      	str	r3, [r7, #16]
	    input_nn[2] = (float)rgb[2] / 255.0f;
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd89 	bl	80002b8 <__aeabi_ui2f>
 80007a6:	4603      	mov	r3, r0
 80007a8:	491f      	ldr	r1, [pc, #124]	@ (8000828 <main+0xe8>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe90 	bl	80004d0 <__aeabi_fdiv>
 80007b0:	4603      	mov	r3, r0
 80007b2:	617b      	str	r3, [r7, #20]

	    forward_nn(input_nn, output_nn);
 80007b4:	463a      	mov	r2, r7
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f983 	bl	8000ac8 <forward_nn>
	    int k = check(output_nn);
 80007c2:	463b      	mov	r3, r7
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fb07 	bl	8000dd8 <check>
 80007ca:	6278      	str	r0, [r7, #36]	@ 0x24
	    if (k == 0){
 80007cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10a      	bne.n	80007e8 <main+0xa8>
	    	SSD1306_GotoXY(20,20);
 80007d2:	2114      	movs	r1, #20
 80007d4:	2014      	movs	r0, #20
 80007d6:	f000 fc99 	bl	800110c <SSD1306_GotoXY>
	    	SSD1306_Puts("Red", &Font_11x18, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	4913      	ldr	r1, [pc, #76]	@ (800082c <main+0xec>)
 80007de:	4814      	ldr	r0, [pc, #80]	@ (8000830 <main+0xf0>)
 80007e0:	f000 fd28 	bl	8001234 <SSD1306_Puts>
	    	SSD1306_UpdateScreen();
 80007e4:	f000 fbee 	bl	8000fc4 <SSD1306_UpdateScreen>
	    }
	    if (k == 1){
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10a      	bne.n	8000804 <main+0xc4>
	    	SSD1306_GotoXY(20,20);
 80007ee:	2114      	movs	r1, #20
 80007f0:	2014      	movs	r0, #20
 80007f2:	f000 fc8b 	bl	800110c <SSD1306_GotoXY>
	    	SSD1306_Puts("Green", &Font_11x18, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	490c      	ldr	r1, [pc, #48]	@ (800082c <main+0xec>)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <main+0xf4>)
 80007fc:	f000 fd1a 	bl	8001234 <SSD1306_Puts>
	    	SSD1306_UpdateScreen();
 8000800:	f000 fbe0 	bl	8000fc4 <SSD1306_UpdateScreen>
	    }
	    if (k == 2){
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000806:	2b02      	cmp	r3, #2
 8000808:	d1b3      	bne.n	8000772 <main+0x32>
	    	SSD1306_GotoXY(20,20);
 800080a:	2114      	movs	r1, #20
 800080c:	2014      	movs	r0, #20
 800080e:	f000 fc7d 	bl	800110c <SSD1306_GotoXY>
	    	SSD1306_Puts("Blue", &Font_11x18, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	4905      	ldr	r1, [pc, #20]	@ (800082c <main+0xec>)
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <main+0xf8>)
 8000818:	f000 fd0c 	bl	8001234 <SSD1306_Puts>
	    	SSD1306_UpdateScreen();
 800081c:	f000 fbd2 	bl	8000fc4 <SSD1306_UpdateScreen>
  {
 8000820:	e7a7      	b.n	8000772 <main+0x32>
 8000822:	bf00      	nop
 8000824:	08003b0c 	.word	0x08003b0c
 8000828:	437f0000 	.word	0x437f0000
 800082c:	20000000 	.word	0x20000000
 8000830:	08003af8 	.word	0x08003af8
 8000834:	08003afc 	.word	0x08003afc
 8000838:	08003b04 	.word	0x08003b04

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	@ 0x40
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2228      	movs	r2, #40	@ 0x28
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 ffc6 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800086e:	2300      	movs	r3, #0
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000872:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ff73 	bl	8002768 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000888:	f000 fad1 	bl	8000e2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 f9e1 	bl	8002c6c <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008b0:	f000 fabd 	bl	8000e2e <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3740      	adds	r7, #64	@ 0x40
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_I2C1_Init+0x50>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <MX_I2C1_Init+0x54>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_I2C1_Init+0x50>)
 80008c8:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x58>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_I2C1_Init+0x50>)
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_I2C1_Init+0x50>)
 80008fa:	f001 f96b 	bl	8001bd4 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000904:	f000 fa93 	bl	8000e2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000080 	.word	0x20000080
 8000910:	40005400 	.word	0x40005400
 8000914:	00061a80 	.word	0x00061a80

08000918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_TIM2_Init+0xc4>)
 8000946:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_TIM2_Init+0xc4>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_TIM2_Init+0xc4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_TIM2_Init+0xc4>)
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_TIM2_Init+0xc4>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_TIM2_Init+0xc4>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096c:	481b      	ldr	r0, [pc, #108]	@ (80009dc <MX_TIM2_Init+0xc4>)
 800096e:	f002 fb0b 	bl	8002f88 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000978:	f000 fa59 	bl	8000e2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000980:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_TIM2_Init+0xc4>)
 800098a:	f002 fb4c 	bl	8003026 <HAL_TIM_ConfigClockSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000994:	f000 fa4b 	bl	8000e2e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_TIM2_Init+0xc4>)
 80009a8:	f002 fc04 	bl	80031b4 <HAL_TIM_SlaveConfigSynchro>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009b2:	f000 fa3c 	bl	8000e2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_TIM2_Init+0xc4>)
 80009c4:	f002 fdce 	bl	8003564 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80009ce:	f000 fa2e 	bl	8000e2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d4 	.word	0x200000d4

080009e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <MX_USART1_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a18:	f002 fe02 	bl	8003620 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 fa04 	bl	8000e2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	40013800 	.word	0x40013800

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	218f      	movs	r1, #143	@ 0x8f
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_GPIO_Init+0x90>)
 8000a7e:	f001 f891 	bl	8001ba4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a82:	238f      	movs	r3, #143	@ 0x8f
 8000a84:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	480a      	ldr	r0, [pc, #40]	@ (8000ac4 <MX_GPIO_Init+0x90>)
 8000a9a:	f000 feff 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_GPIO_Init+0x90>)
 8000ab2:	f000 fef3 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <forward_nn>:
// Layer 5 Biases
const float output_biases[] = {
-0.324474, -0.071484, 0.677330
};

void forward_nn(const float* input, float* output) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0e2      	sub	sp, #392	@ 0x188
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000ad2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000adc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8000ae0:	6019      	str	r1, [r3, #0]
    float layer2_output[24];
    float layer3_output[24];
    float layer4_output[16];
    float final_output[3];

    forward_layer(input, 3, layer1_weights, 24, layer1_biases, layer1_output, relu);
 8000ae2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000ae6:	f5a3 70ba 	sub.w	r0, r3, #372	@ 0x174
 8000aea:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <forward_nn+0xcc>)
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4b28      	ldr	r3, [pc, #160]	@ (8000b98 <forward_nn+0xd0>)
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2318      	movs	r3, #24
 8000afa:	4a28      	ldr	r2, [pc, #160]	@ (8000b9c <forward_nn+0xd4>)
 8000afc:	2103      	movs	r1, #3
 8000afe:	6800      	ldr	r0, [r0, #0]
 8000b00:	f000 f8fd 	bl	8000cfe <forward_layer>
    forward_layer(layer1_output, 24, layer2_weights, 24, layer2_biases, layer2_output, sigmoid);
 8000b04:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <forward_nn+0xd8>)
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <forward_nn+0xdc>)
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2318      	movs	r3, #24
 8000b18:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <forward_nn+0xe0>)
 8000b1a:	2118      	movs	r1, #24
 8000b1c:	f000 f8ef 	bl	8000cfe <forward_layer>
    forward_layer(layer2_output, 24, layer3_weights, 24, layer3_biases, layer3_output, sigmoid);
 8000b20:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <forward_nn+0xd8>)
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <forward_nn+0xe4>)
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2318      	movs	r3, #24
 8000b34:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <forward_nn+0xe8>)
 8000b36:	2118      	movs	r1, #24
 8000b38:	f000 f8e1 	bl	8000cfe <forward_layer>
    forward_layer(layer3_output, 24, layer4_weights, 16, layer4_biases, layer4_output, sigmoid);
 8000b3c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <forward_nn+0xd8>)
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <forward_nn+0xec>)
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2310      	movs	r3, #16
 8000b50:	4a19      	ldr	r2, [pc, #100]	@ (8000bb8 <forward_nn+0xf0>)
 8000b52:	2118      	movs	r1, #24
 8000b54:	f000 f8d3 	bl	8000cfe <forward_layer>
    forward_layer(layer4_output, 16, output_weights, 3, output_biases, final_output, NULL);
 8000b58:	f107 0018 	add.w	r0, r7, #24
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <forward_nn+0xf4>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <forward_nn+0xf8>)
 8000b6e:	2110      	movs	r1, #16
 8000b70:	f000 f8c5 	bl	8000cfe <forward_layer>
    softmax(final_output, 3, output);
 8000b74:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000b78:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8000b7c:	f107 000c 	add.w	r0, r7, #12
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	2103      	movs	r1, #3
 8000b84:	f000 f84d 	bl	8000c22 <softmax>
}
 8000b88:	bf00      	nop
 8000b8a:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08000bc5 	.word	0x08000bc5
 8000b98:	08004994 	.word	0x08004994
 8000b9c:	08004874 	.word	0x08004874
 8000ba0:	08000bed 	.word	0x08000bed
 8000ba4:	080052f4 	.word	0x080052f4
 8000ba8:	080049f4 	.word	0x080049f4
 8000bac:	08005c54 	.word	0x08005c54
 8000bb0:	08005354 	.word	0x08005354
 8000bb4:	080062b4 	.word	0x080062b4
 8000bb8:	08005cb4 	.word	0x08005cb4
 8000bbc:	080063b4 	.word	0x080063b4
 8000bc0:	080062f4 	.word	0x080062f4

08000bc4 <relu>:

// Hàm kích hoạt ReLU
float relu(float x) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    return (x > 0) ? x : 0;
 8000bcc:	f04f 0100 	mov.w	r1, #0
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fd85 	bl	80006e0 <__aeabi_fcmpgt>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <relu+0x1c>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	e001      	b.n	8000be4 <relu+0x20>
 8000be0:	f04f 0300 	mov.w	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <sigmoid>:

// Hàm kích hoạt Sigmoid
float sigmoid(float x) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    return 1.0f / (1.0f + expf(-x));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fe20 	bl	8003840 <expf>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faa6 	bl	8000158 <__addsf3>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000c14:	f7ff fc5c 	bl	80004d0 <__aeabi_fdiv>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <softmax>:

// Hàm Softmax
void softmax(const float* inputs, int n_inputs, float* outputs) {
 8000c22:	b590      	push	{r4, r7, lr}
 8000c24:	b08b      	sub	sp, #44	@ 0x2c
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
    float max_input = inputs[0];
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i < n_inputs; i++) {
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	e014      	b.n	8000c64 <softmax+0x42>
        if (inputs[i] > max_input) {
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c48:	f7ff fd2c 	bl	80006a4 <__aeabi_fcmplt>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <softmax+0x3c>
            max_input = inputs[i];
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i < n_inputs; i++) {
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	3301      	adds	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3a      	ldr	r2, [r7, #32]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbe6      	blt.n	8000c3a <softmax+0x18>
        }
    }

    float sum_exp = 0.0f;
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < n_inputs; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	e021      	b.n	8000cbc <softmax+0x9a>
        outputs[i] = expf(inputs[i] - max_input);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fa65 	bl	8000154 <__aeabi_fsub>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	18d4      	adds	r4, r2, r3
 8000c96:	4608      	mov	r0, r1
 8000c98:	f002 fdd2 	bl	8003840 <expf>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	6023      	str	r3, [r4, #0]
        sum_exp += outputs[i];
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f7ff fa53 	bl	8000158 <__addsf3>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < n_inputs; i++) {
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbd9      	blt.n	8000c78 <softmax+0x56>
    }

    for (int i = 0; i < n_inputs; i++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e010      	b.n	8000cec <softmax+0xca>
        outputs[i] /= sum_exp;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	18d4      	adds	r4, r2, r3
 8000cdc:	69f9      	ldr	r1, [r7, #28]
 8000cde:	f7ff fbf7 	bl	80004d0 <__aeabi_fdiv>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < n_inputs; i++) {
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbea      	blt.n	8000cca <softmax+0xa8>
    }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	372c      	adds	r7, #44	@ 0x2c
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}

08000cfe <forward_layer>:

// Hàm forward propagation cho từng lớp
void forward_layer(const float* inputs, int n_inputs, const float* weights, int n_neurons,
                   const float* biases, float* outputs, float (*activation)(float)) {
 8000cfe:	b5b0      	push	{r4, r5, r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n_neurons; i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e049      	b.n	8000da6 <forward_layer+0xa8>
        outputs[i] = biases[i];
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d18:	441a      	add	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d20:	440b      	add	r3, r1
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n_inputs; j++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e024      	b.n	8000d76 <forward_layer+0x78>
            outputs[i] += inputs[j] * weights[i * n_inputs + j];
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d32:	4413      	add	r3, r2
 8000d34:	681d      	ldr	r5, [r3, #0]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	fb03 f202 	mul.w	r2, r3, r2
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f7ff fb07 	bl	8000368 <__aeabi_fmul>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d64:	18d4      	adds	r4, r2, r3
 8000d66:	4628      	mov	r0, r5
 8000d68:	f7ff f9f6 	bl	8000158 <__addsf3>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	6023      	str	r3, [r4, #0]
        for (int j = 0; j < n_inputs; j++) {
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	3301      	adds	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbd6      	blt.n	8000d2c <forward_layer+0x2e>
        }
        if (activation != NULL) {
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00d      	beq.n	8000da0 <forward_layer+0xa2>
            outputs[i] = activation(outputs[i]);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d8a:	4413      	add	r3, r2
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d94:	18d4      	adds	r4, r2, r3
 8000d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4798      	blx	r3
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < n_neurons; i++) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dbb1      	blt.n	8000d12 <forward_layer+0x14>
        }
    }
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}

08000db8 <TCS3200_Init>:

void TCS3200_Init(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <TCS3200_Init+0x1c>)
 8000dc2:	f000 feef 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <TCS3200_Init+0x1c>)
 8000dcc:	f000 feea 	bl	8001ba4 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <check>:
    // Chuẩn hóa giá trị tần số thành thang đo 0-255
    *red = NormalizeToRGB(rawRed, RED_Min, RED_Max);
    *green = NormalizeToRGB(rawGreen, GREEN_Min, GREEN_Max);
    *blue = NormalizeToRGB(rawBlue, BLUE_Min, BLUE_Max);
}
int check(const float* output_nn){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	int status = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
	float max = output_nn[0];
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i ++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e016      	b.n	8000e1e <check+0x46>
		if(output_nn[i] > max){
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6938      	ldr	r0, [r7, #16]
 8000dfe:	f7ff fc51 	bl	80006a4 <__aeabi_fcmplt>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <check+0x40>
			max = output_nn[i];
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
			status = i;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 3; i ++){
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dde5      	ble.n	8000df0 <check+0x18>
		}
	}
	return status;
 8000e24:	697b      	ldr	r3, [r7, #20]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e32:	b672      	cpsid	i
}
 8000e34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e36:	bf00      	nop
 8000e38:	e7fd      	b.n	8000e36 <Error_Handler+0x8>
	...

08000e3c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e42:	f000 fa1d 	bl	8001280 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e46:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2178      	movs	r1, #120	@ 0x78
 8000e4e:	485b      	ldr	r0, [pc, #364]	@ (8000fbc <SSD1306_Init+0x180>)
 8000e50:	f001 f902 	bl	8002058 <HAL_I2C_IsDeviceReady>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e0a9      	b.n	8000fb2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000e5e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000e62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e64:	e002      	b.n	8000e6c <SSD1306_Init+0x30>
		p--;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f9      	bne.n	8000e66 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e72:	22ae      	movs	r2, #174	@ 0xae
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 fa7c 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2078      	movs	r0, #120	@ 0x78
 8000e82:	f000 fa77 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e86:	2210      	movs	r2, #16
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 fa72 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e90:	22b0      	movs	r2, #176	@ 0xb0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2078      	movs	r0, #120	@ 0x78
 8000e96:	f000 fa6d 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e9a:	22c8      	movs	r2, #200	@ 0xc8
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 fa68 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2078      	movs	r0, #120	@ 0x78
 8000eaa:	f000 fa63 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000eae:	2210      	movs	r2, #16
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 fa5e 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000eb8:	2240      	movs	r2, #64	@ 0x40
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2078      	movs	r0, #120	@ 0x78
 8000ebe:	f000 fa59 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000ec2:	2281      	movs	r2, #129	@ 0x81
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 fa54 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ecc:	22ff      	movs	r2, #255	@ 0xff
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2078      	movs	r0, #120	@ 0x78
 8000ed2:	f000 fa4f 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ed6:	22a1      	movs	r2, #161	@ 0xa1
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2078      	movs	r0, #120	@ 0x78
 8000edc:	f000 fa4a 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ee0:	22a6      	movs	r2, #166	@ 0xa6
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2078      	movs	r0, #120	@ 0x78
 8000ee6:	f000 fa45 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000eea:	22a8      	movs	r2, #168	@ 0xa8
 8000eec:	2100      	movs	r1, #0
 8000eee:	2078      	movs	r0, #120	@ 0x78
 8000ef0:	f000 fa40 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ef4:	223f      	movs	r2, #63	@ 0x3f
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2078      	movs	r0, #120	@ 0x78
 8000efa:	f000 fa3b 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000efe:	22a4      	movs	r2, #164	@ 0xa4
 8000f00:	2100      	movs	r1, #0
 8000f02:	2078      	movs	r0, #120	@ 0x78
 8000f04:	f000 fa36 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f08:	22d3      	movs	r2, #211	@ 0xd3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2078      	movs	r0, #120	@ 0x78
 8000f0e:	f000 fa31 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2078      	movs	r0, #120	@ 0x78
 8000f18:	f000 fa2c 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f1c:	22d5      	movs	r2, #213	@ 0xd5
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2078      	movs	r0, #120	@ 0x78
 8000f22:	f000 fa27 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f26:	22f0      	movs	r2, #240	@ 0xf0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2078      	movs	r0, #120	@ 0x78
 8000f2c:	f000 fa22 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f30:	22d9      	movs	r2, #217	@ 0xd9
 8000f32:	2100      	movs	r1, #0
 8000f34:	2078      	movs	r0, #120	@ 0x78
 8000f36:	f000 fa1d 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f3a:	2222      	movs	r2, #34	@ 0x22
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2078      	movs	r0, #120	@ 0x78
 8000f40:	f000 fa18 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f44:	22da      	movs	r2, #218	@ 0xda
 8000f46:	2100      	movs	r1, #0
 8000f48:	2078      	movs	r0, #120	@ 0x78
 8000f4a:	f000 fa13 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f4e:	2212      	movs	r2, #18
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	@ 0x78
 8000f54:	f000 fa0e 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f58:	22db      	movs	r2, #219	@ 0xdb
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2078      	movs	r0, #120	@ 0x78
 8000f5e:	f000 fa09 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f62:	2220      	movs	r2, #32
 8000f64:	2100      	movs	r1, #0
 8000f66:	2078      	movs	r0, #120	@ 0x78
 8000f68:	f000 fa04 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f6c:	228d      	movs	r2, #141	@ 0x8d
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2078      	movs	r0, #120	@ 0x78
 8000f72:	f000 f9ff 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f76:	2214      	movs	r2, #20
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	@ 0x78
 8000f7c:	f000 f9fa 	bl	8001374 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f80:	22af      	movs	r2, #175	@ 0xaf
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	@ 0x78
 8000f86:	f000 f9f5 	bl	8001374 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f8a:	222e      	movs	r2, #46	@ 0x2e
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 f9f0 	bl	8001374 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f843 	bl	8001020 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000f9a:	f000 f813 	bl	8000fc4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <SSD1306_Init+0x184>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SSD1306_Init+0x184>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SSD1306_Init+0x184>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000080 	.word	0x20000080
 8000fc0:	20000564 	.word	0x20000564

08000fc4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	e01d      	b.n	800100c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3b50      	subs	r3, #80	@ 0x50
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	@ 0x78
 8000fdc:	f000 f9ca 	bl	8001374 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f000 f9c5 	bl	8001374 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000fea:	2210      	movs	r2, #16
 8000fec:	2100      	movs	r1, #0
 8000fee:	2078      	movs	r0, #120	@ 0x78
 8000ff0:	f000 f9c0 	bl	8001374 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	01db      	lsls	r3, r3, #7
 8000ff8:	4a08      	ldr	r2, [pc, #32]	@ (800101c <SSD1306_UpdateScreen+0x58>)
 8000ffa:	441a      	add	r2, r3
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	2078      	movs	r0, #120	@ 0x78
 8001002:	f000 f951 	bl	80012a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	3301      	adds	r3, #1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b07      	cmp	r3, #7
 8001010:	d9de      	bls.n	8000fd0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000164 	.word	0x20000164

08001020 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <SSD1306_Fill+0x14>
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <SSD1306_Fill+0x16>
 8001034:	23ff      	movs	r3, #255	@ 0xff
 8001036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103a:	4619      	mov	r1, r3
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <SSD1306_Fill+0x2c>)
 800103e:	f002 fbcd 	bl	80037dc <memset>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000164 	.word	0x20000164

08001050 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	460b      	mov	r3, r1
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	70fb      	strb	r3, [r7, #3]
	if (
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b7f      	cmp	r3, #127	@ 0x7f
 8001066:	d848      	bhi.n	80010fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	2b3f      	cmp	r3, #63	@ 0x3f
 800106c:	d845      	bhi.n	80010fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <SSD1306_DrawPixel+0xb4>)
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d11a      	bne.n	80010c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	88bb      	ldrh	r3, [r7, #4]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b298      	uxth	r0, r3
 8001092:	4603      	mov	r3, r0
 8001094:	01db      	lsls	r3, r3, #7
 8001096:	4413      	add	r3, r2
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <SSD1306_DrawPixel+0xb8>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	b25a      	sxtb	r2, r3
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b259      	sxtb	r1, r3
 80010b0:	88fa      	ldrh	r2, [r7, #6]
 80010b2:	4603      	mov	r3, r0
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	4413      	add	r3, r2
 80010b8:	b2c9      	uxtb	r1, r1
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <SSD1306_DrawPixel+0xb8>)
 80010bc:	54d1      	strb	r1, [r2, r3]
 80010be:	e01d      	b.n	80010fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	b298      	uxth	r0, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	01db      	lsls	r3, r3, #7
 80010cc:	4413      	add	r3, r2
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <SSD1306_DrawPixel+0xb8>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4013      	ands	r3, r2
 80010e8:	b259      	sxtb	r1, r3
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	4603      	mov	r3, r0
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4413      	add	r3, r2
 80010f2:	b2c9      	uxtb	r1, r1
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <SSD1306_DrawPixel+0xb8>)
 80010f6:	54d1      	strb	r1, [r2, r3]
 80010f8:	e000      	b.n	80010fc <SSD1306_DrawPixel+0xac>
		return;
 80010fa:	bf00      	nop
	}
}
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000564 	.word	0x20000564
 8001108:	20000164 	.word	0x20000164

0800110c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	80fb      	strh	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800111c:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SSD1306_GotoXY+0x28>)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <SSD1306_GotoXY+0x28>)
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	8053      	strh	r3, [r2, #2]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000564 	.word	0x20000564

08001138 <SSD1306_Putc>:



char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001148:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <SSD1306_Putc+0xf8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
	if (
 8001154:	2b7f      	cmp	r3, #127	@ 0x7f
 8001156:	dc07      	bgt.n	8001168 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001158:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <SSD1306_Putc+0xf8>)
 800115a:	885b      	ldrh	r3, [r3, #2]
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001164:	2b3f      	cmp	r3, #63	@ 0x3f
 8001166:	dd01      	ble.n	800116c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e05d      	b.n	8001228 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e04b      	b.n	800120a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3b20      	subs	r3, #32
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	7849      	ldrb	r1, [r1, #1]
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4619      	mov	r1, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	440b      	add	r3, r1
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	e030      	b.n	80011f8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <SSD1306_Putc+0xf8>)
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b298      	uxth	r0, r3
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <SSD1306_Putc+0xf8>)
 80011b4:	885a      	ldrh	r2, [r3, #2]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	79ba      	ldrb	r2, [r7, #6]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff ff45 	bl	8001050 <SSD1306_DrawPixel>
 80011c6:	e014      	b.n	80011f2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <SSD1306_Putc+0xf8>)
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b298      	uxth	r0, r3
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <SSD1306_Putc+0xf8>)
 80011d6:	885a      	ldrh	r2, [r3, #2]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b299      	uxth	r1, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	f7ff ff2f 	bl	8001050 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	3301      	adds	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4293      	cmp	r3, r2
 8001202:	d3c8      	bcc.n	8001196 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	461a      	mov	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4293      	cmp	r3, r2
 8001214:	d3ad      	bcc.n	8001172 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <SSD1306_Putc+0xf8>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <SSD1306_Putc+0xf8>)
 8001224:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001226:	79fb      	ldrb	r3, [r7, #7]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000564 	.word	0x20000564

08001234 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001242:	e012      	b.n	800126a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff73 	bl	8001138 <SSD1306_Putc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d002      	beq.n	8001264 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	e008      	b.n	8001276 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e8      	bne.n	8001244 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <ssd1306_I2C_Init+0x24>)
 8001288:	607b      	str	r3, [r7, #4]
	while(p>0)
 800128a:	e002      	b.n	8001292 <ssd1306_I2C_Init+0x12>
		p--;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	0003d090 	.word	0x0003d090

080012a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b0c7      	sub	sp, #284	@ 0x11c
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80012b6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80012ba:	600a      	str	r2, [r1, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012c2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012c6:	4622      	mov	r2, r4
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ce:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80012d2:	4602      	mov	r2, r0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012de:	460a      	mov	r2, r1
 80012e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ee:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012fc:	e015      	b.n	800132a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001302:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001306:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	441a      	add	r2, r3
 800130e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001312:	3301      	adds	r3, #1
 8001314:	7811      	ldrb	r1, [r2, #0]
 8001316:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800131a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800131e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001320:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001324:	3301      	adds	r3, #1
 8001326:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800132a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800132e:	b29b      	uxth	r3, r3
 8001330:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001334:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d8df      	bhi.n	80012fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800133e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001342:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b299      	uxth	r1, r3
 800134a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800134e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	f107 020c 	add.w	r2, r7, #12
 800135c:	200a      	movs	r0, #10
 800135e:	9000      	str	r0, [sp, #0]
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <ssd1306_I2C_WriteMulti+0xc8>)
 8001362:	f000 fd7b 	bl	8001e5c <HAL_I2C_Master_Transmit>
}
 8001366:	bf00      	nop
 8001368:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	20000080 	.word	0x20000080

08001374 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800138a:	797b      	ldrb	r3, [r7, #5]
 800138c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	b299      	uxth	r1, r3
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	230a      	movs	r3, #10
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2302      	movs	r3, #2
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <ssd1306_I2C_Write+0x38>)
 800139e:	f000 fd5d 	bl	8001e5c <HAL_I2C_Master_Transmit>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000080 	.word	0x20000080

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a14      	ldr	r2, [pc, #80]	@ (800140c <HAL_MspInit+0x5c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <HAL_MspInit+0x5c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_MspInit+0x60>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_MspInit+0x60>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <HAL_I2C_MspInit+0x70>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d123      	bne.n	800147c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144c:	23c0      	movs	r3, #192	@ 0xc0
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	@ (800148c <HAL_I2C_MspInit+0x78>)
 8001460:	f000 fa1c 	bl	800189c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146e:	61d3      	str	r3, [r2, #28]
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_I2C_MspInit+0x74>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40005400 	.word	0x40005400
 8001488:	40021000 	.word	0x40021000
 800148c:	40010c00 	.word	0x40010c00

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a0:	d10b      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <HAL_TIM_Base_MspInit+0x34>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a07      	ldr	r2, [pc, #28]	@ (80014c4 <HAL_TIM_Base_MspInit+0x34>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_TIM_Base_MspInit+0x34>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <HAL_UART_MspInit+0x8c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d131      	bne.n	800154c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_UART_MspInit+0x90>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_UART_MspInit+0x90>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_UART_MspInit+0x90>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_UART_MspInit+0x90>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <HAL_UART_MspInit+0x90>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_UART_MspInit+0x90>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800151c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_UART_MspInit+0x94>)
 800152e:	f000 f9b5 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <HAL_UART_MspInit+0x94>)
 8001548:	f000 f9a8 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013800 	.word	0x40013800
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <NMI_Handler+0x4>

08001568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <MemManage_Handler+0x4>

08001578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <UsageFault_Handler+0x4>

08001588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f874 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff fff8 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ca:	490c      	ldr	r1, [pc, #48]	@ (80015fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e0:	4c09      	ldr	r4, [pc, #36]	@ (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 f903 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff f8a5 	bl	8000740 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001600:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 8001604:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001608:	200006a8 	.word	0x200006a8

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f907 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fec0 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f911 	bl	8001882 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f8e7 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000008 	.word	0x20000008
 8001694:	20000010 	.word	0x20000010
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	@ (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000010 	.word	0x20000010
 80016bc:	2000056c 	.word	0x2000056c

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	@ (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	2000056c 	.word	0x2000056c

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	@ (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	@ (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	@ 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff90 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff49 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff5e 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff90 	bl	800178c <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5f 	bl	8001738 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb0 	bl	80017f0 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e169      	b.n	8001b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8158 	bne.w	8001b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018d8:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d875      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018de:	4a98      	ldr	r2, [pc, #608]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d058      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018e4:	4a96      	ldr	r2, [pc, #600]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d86f      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018ea:	4a96      	ldr	r2, [pc, #600]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d052      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018f0:	4a94      	ldr	r2, [pc, #592]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d869      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018f6:	4a94      	ldr	r2, [pc, #592]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04c      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018fc:	4a92      	ldr	r2, [pc, #584]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d863      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001902:	4a92      	ldr	r2, [pc, #584]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d046      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 8001908:	4a90      	ldr	r2, [pc, #576]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d85d      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d82a      	bhi.n	8001968 <HAL_GPIO_Init+0xcc>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d859      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_GPIO_Init+0x80>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001997 	.word	0x08001997
 8001920:	08001971 	.word	0x08001971
 8001924:	08001983 	.word	0x08001983
 8001928:	080019c5 	.word	0x080019c5
 800192c:	080019cb 	.word	0x080019cb
 8001930:	080019cb 	.word	0x080019cb
 8001934:	080019cb 	.word	0x080019cb
 8001938:	080019cb 	.word	0x080019cb
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019cb 	.word	0x080019cb
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cb 	.word	0x080019cb
 800194c:	080019cb 	.word	0x080019cb
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019cb 	.word	0x080019cb
 8001958:	080019cb 	.word	0x080019cb
 800195c:	080019cb 	.word	0x080019cb
 8001960:	08001979 	.word	0x08001979
 8001964:	0800198d 	.word	0x0800198d
 8001968:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <HAL_GPIO_Init+0x2b4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e029      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e024      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01f      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e01a      	b.n	80019cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e009      	b.n	80019cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x130>
          break;
 80019ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	@ 0xff
 80019d0:	d801      	bhi.n	80019d6 <HAL_GPIO_Init+0x13a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_Init+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	@ 0xff
 80019e0:	d802      	bhi.n	80019e8 <HAL_GPIO_Init+0x14c>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x152>
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	3b08      	subs	r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	210f      	movs	r1, #15
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80b1 	beq.w	8001b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a34:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1ec>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_GPIO_Init+0x2c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1e0>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9a:	492f      	ldr	r1, [pc, #188]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	492c      	ldr	r1, [pc, #176]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4928      	ldr	r1, [pc, #160]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	491e      	ldr	r1, [pc, #120]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4914      	ldr	r1, [pc, #80]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e021      	b.n	8001b7e <HAL_GPIO_Init+0x2e2>
 8001b3a:	bf00      	nop
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10220000 	.word	0x10220000
 8001b48:	10210000 	.word	0x10210000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40011400 	.word	0x40011400
 8001b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae8e 	bne.w	80018b0 <HAL_GPIO_Init+0x14>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	@ 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e12b      	b.n	8001e3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fc0a 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2224      	movs	r2, #36	@ 0x24
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c38:	f001 f960 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8001c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a81      	ldr	r2, [pc, #516]	@ (8001e48 <HAL_I2C_Init+0x274>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d807      	bhi.n	8001c58 <HAL_I2C_Init+0x84>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a80      	ldr	r2, [pc, #512]	@ (8001e4c <HAL_I2C_Init+0x278>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e006      	b.n	8001c66 <HAL_I2C_Init+0x92>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e50 <HAL_I2C_Init+0x27c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf94      	ite	ls
 8001c60:	2301      	movls	r3, #1
 8001c62:	2300      	movhi	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0e7      	b.n	8001e3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4a78      	ldr	r2, [pc, #480]	@ (8001e54 <HAL_I2C_Init+0x280>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e48 <HAL_I2C_Init+0x274>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_I2C_Init+0xd4>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	e009      	b.n	8001cbc <HAL_I2C_Init+0xe8>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	4a69      	ldr	r2, [pc, #420]	@ (8001e58 <HAL_I2C_Init+0x284>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	3301      	adds	r3, #1
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	495c      	ldr	r1, [pc, #368]	@ (8001e48 <HAL_I2C_Init+0x274>)
 8001cd8:	428b      	cmp	r3, r1
 8001cda:	d819      	bhi.n	8001d10 <HAL_I2C_Init+0x13c>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <HAL_I2C_Init+0x138>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e59      	subs	r1, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	e051      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e04f      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d111      	bne.n	8001d3c <HAL_I2C_Init+0x168>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e012      	b.n	8001d62 <HAL_I2C_Init+0x18e>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e58      	subs	r0, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	0099      	lsls	r1, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Init+0x196>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e022      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <HAL_I2C_Init+0x1bc>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e58      	subs	r0, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	440b      	add	r3, r1
 8001d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d8e:	e00f      	b.n	8001db0 <HAL_I2C_Init+0x1dc>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	0099      	lsls	r1, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	6809      	ldr	r1, [r1, #0]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6911      	ldr	r1, [r2, #16]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68d2      	ldr	r2, [r2, #12]
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	000186a0 	.word	0x000186a0
 8001e4c:	001e847f 	.word	0x001e847f
 8001e50:	003d08ff 	.word	0x003d08ff
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fc26 	bl	80016c0 <HAL_GetTick>
 8001e74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 80e0 	bne.w	8002044 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2319      	movs	r3, #25
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4970      	ldr	r1, [pc, #448]	@ (8002050 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa92 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e0d3      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2C_Master_Transmit+0x50>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e0cc      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d007      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2221      	movs	r2, #33	@ 0x21
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2210      	movs	r2, #16
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	893a      	ldrh	r2, [r7, #8]
 8001f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9ca 	bl	80022b4 <I2C_MasterRequestWrite>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08d      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f40:	e066      	b.n	8002010 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fb50 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d107      	bne.n	8001f6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06b      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11b      	bne.n	8001fe4 <HAL_I2C_Master_Transmit+0x188>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d017      	beq.n	8001fe4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6a39      	ldr	r1, [r7, #32]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fb47 	bl	800267c <I2C_WaitOnBTFFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d107      	bne.n	800200c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e01a      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d194      	bne.n	8001f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002044:	2302      	movs	r3, #2
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	00100002 	.word	0x00100002
 8002054:	ffff0000 	.word	0xffff0000

08002058 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	460b      	mov	r3, r1
 8002066:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fb2a 	bl	80016c0 <HAL_GetTick>
 800206c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	f040 8111 	bne.w	80022a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2319      	movs	r3, #25
 8002086:	2201      	movs	r2, #1
 8002088:	4988      	ldr	r1, [pc, #544]	@ (80022ac <HAL_I2C_IsDeviceReady+0x254>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f994 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	e104      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_IsDeviceReady+0x50>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0fd      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d007      	beq.n	80020ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2224      	movs	r2, #36	@ 0x24
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a70      	ldr	r2, [pc, #448]	@ (80022b0 <HAL_I2C_IsDeviceReady+0x258>)
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002100:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f952 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002128:	d103      	bne.n	8002132 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0b6      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002136:	897b      	ldrh	r3, [r7, #10]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002144:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fabb 	bl	80016c0 <HAL_GetTick>
 800214a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b02      	cmp	r3, #2
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800217a:	e025      	b.n	80021c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7ff faa0 	bl	80016c0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <HAL_I2C_IsDeviceReady+0x13a>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22a0      	movs	r2, #160	@ 0xa0
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80021d2:	d005      	beq.n	80021e0 <HAL_I2C_IsDeviceReady+0x188>
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_I2C_IsDeviceReady+0x188>
 80021da:	7dbb      	ldrb	r3, [r7, #22]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0cd      	beq.n	800217c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d129      	bne.n	800224a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002204:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2319      	movs	r3, #25
 8002222:	2201      	movs	r2, #1
 8002224:	4921      	ldr	r1, [pc, #132]	@ (80022ac <HAL_I2C_IsDeviceReady+0x254>)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f8c6 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e036      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e02c      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002258:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002262:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	490f      	ldr	r1, [pc, #60]	@ (80022ac <HAL_I2C_IsDeviceReady+0x254>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8a2 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e012      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	3301      	adds	r3, #1
 8002282:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	f4ff af32 	bcc.w	80020f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	00100002 	.word	0x00100002
 80022b0:	ffff0000 	.word	0xffff0000

080022b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d006      	beq.n	80022de <I2C_MasterRequestWrite+0x2a>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d003      	beq.n	80022de <I2C_MasterRequestWrite+0x2a>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022dc:	d108      	bne.n	80022f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e00b      	b.n	8002308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d107      	bne.n	8002308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f84f 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800232e:	d103      	bne.n	8002338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e035      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002344:	d108      	bne.n	8002358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002346:	897b      	ldrh	r3, [r7, #10]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	e01b      	b.n	8002390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002358:	897b      	ldrh	r3, [r7, #10]
 800235a:	11db      	asrs	r3, r3, #7
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f003 0306 	and.w	r3, r3, #6
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f063 030f 	orn	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	490e      	ldr	r1, [pc, #56]	@ (80023b0 <I2C_MasterRequestWrite+0xfc>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f898 	bl	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e010      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <I2C_MasterRequestWrite+0x100>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f888 	bl	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	00010008 	.word	0x00010008
 80023b4:	00010002 	.word	0x00010002

080023b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c8:	e048      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d044      	beq.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d2:	f7ff f975 	bl	80016c0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d302      	bcc.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d139      	bne.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10d      	bne.n	800240e <I2C_WaitOnFlagUntilTimeout+0x56>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	e00c      	b.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x70>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	429a      	cmp	r2, r3
 800242c:	d116      	bne.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e023      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10d      	bne.n	8002482 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	e00c      	b.n	800249c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d093      	beq.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ba:	e071      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ca:	d123      	bne.n	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e067      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d041      	beq.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7ff f8d0 	bl	80016c0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d136      	bne.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10c      	bne.n	8002556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e00b      	b.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e021      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10c      	bne.n	80025c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e00b      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f af6d 	bne.w	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f8:	e034      	b.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f886 	bl	800270c <I2C_IsAcknowledgeFailed>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e034      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d028      	beq.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff f855 	bl	80016c0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002632:	2b80      	cmp	r3, #128	@ 0x80
 8002634:	d016      	beq.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b80      	cmp	r3, #128	@ 0x80
 8002670:	d1c3      	bne.n	80025fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002688:	e034      	b.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f83e 	bl	800270c <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e034      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d028      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f80d 	bl	80016c0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11d      	bne.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d016      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1c3      	bne.n	800268a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d11b      	bne.n	800275c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800272c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	f043 0204 	orr.w	r2, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e272      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b92      	ldr	r3, [pc, #584]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00c      	beq.n	80027ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002794:	4b8f      	ldr	r3, [pc, #572]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
 80027a0:	4b8c      	ldr	r3, [pc, #560]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b89      	ldr	r3, [pc, #548]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06c      	beq.n	8002894 <HAL_RCC_OscConfig+0x12c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d168      	bne.n	8002894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e24c      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x76>
 80027d0:	4b80      	ldr	r3, [pc, #512]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7f      	ldr	r2, [pc, #508]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e02e      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b7b      	ldr	r3, [pc, #492]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7a      	ldr	r2, [pc, #488]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b78      	ldr	r3, [pc, #480]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a77      	ldr	r2, [pc, #476]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xbc>
 800280a:	4b72      	ldr	r3, [pc, #456]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a71      	ldr	r2, [pc, #452]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6f      	ldr	r3, [pc, #444]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6e      	ldr	r2, [pc, #440]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002824:	4b6b      	ldr	r3, [pc, #428]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6a      	ldr	r2, [pc, #424]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a67      	ldr	r2, [pc, #412]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe ff3c 	bl	80016c0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe ff38 	bl	80016c0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e200      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5d      	ldr	r3, [pc, #372]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xe4>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe ff28 	bl	80016c0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe ff24 	bl	80016c0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1ec      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x10c>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a2:	4b4c      	ldr	r3, [pc, #304]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ae:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b43      	ldr	r3, [pc, #268]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3d      	ldr	r3, [pc, #244]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4939      	ldr	r1, [pc, #228]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fedd 	bl	80016c0 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fed9 	bl	80016c0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4927      	ldr	r1, [pc, #156]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe febc 	bl	80016c0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7fe feb8 	bl	80016c0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e180      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03a      	beq.n	80029ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d019      	beq.n	80029b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <HAL_RCC_OscConfig+0x274>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe fe9c 	bl	80016c0 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fe98 	bl	80016c0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e160      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 face 	bl	8002f4c <RCC_Delay>
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_RCC_OscConfig+0x274>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe fe82 	bl	80016c0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fe7e 	bl	80016c0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d908      	bls.n	80029e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e146      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	42420000 	.word	0x42420000
 80029dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b92      	ldr	r3, [pc, #584]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e9      	bne.n	80029c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a6 	beq.w	8002b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a87      	ldr	r2, [pc, #540]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b85      	ldr	r3, [pc, #532]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b82      	ldr	r3, [pc, #520]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d118      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fe3f 	bl	80016c0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7fe fe3b 	bl	80016c0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	@ 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e103      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_RCC_OscConfig+0x4c8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x312>
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a69      	ldr	r2, [pc, #420]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x356>
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x36e>
 8002abe:	4b5b      	ldr	r3, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fdef 	bl	80016c0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fdeb 	bl	80016c0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0b1      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x37e>
 8002b08:	e014      	b.n	8002b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fdd9 	bl	80016c0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fdd5 	bl	80016c0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e09b      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	4b40      	ldr	r3, [pc, #256]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d061      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d146      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fda9 	bl	80016c0 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe fda5 	bl	80016c0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e06d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4921      	ldr	r1, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a19      	ldr	r1, [r3, #32]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fd79 	bl	80016c0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fd75 	bl	80016c0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46a>
 8002bf0:	e035      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd62 	bl	80016c0 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fd5e 	bl	80016c0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e026      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x498>
 8002c1e:	e01e      	b.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e019      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x500>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d0      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4965      	ldr	r1, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d040      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e073      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4936      	ldr	r1, [pc, #216]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fcb0 	bl	80016c0 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fcac 	bl	80016c0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e053      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d210      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4922      	ldr	r1, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1cc>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fc0e 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	080063c0 	.word	0x080063c0
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x30>
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6e:	e027      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e72:	613b      	str	r3, [r7, #16]
      break;
 8002e74:	e027      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	0c5b      	lsrs	r3, r3, #17
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	4a11      	ldr	r2, [pc, #68]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea2:	fb03 f202 	mul.w	r2, r3, r2
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e004      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec2:	613b      	str	r3, [r7, #16]
      break;
 8002ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec6:	693b      	ldr	r3, [r7, #16]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	080063d8 	.word	0x080063d8
 8002ee0:	080063e8 	.word	0x080063e8
 8002ee4:	003d0900 	.word	0x003d0900

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b02      	ldr	r3, [pc, #8]	@ (8002ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000008 	.word	0x20000008

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff2 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080063d0 	.word	0x080063d0

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0adb      	lsrs	r3, r3, #11
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	@ (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	080063d0 	.word	0x080063d0

08002f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f54:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <RCC_Delay+0x34>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <RCC_Delay+0x38>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a5b      	lsrs	r3, r3, #9
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f68:	bf00      	nop
  }
  while (Delay --);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	60fa      	str	r2, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f9      	bne.n	8002f68 <RCC_Delay+0x1c>
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	20000008 	.word	0x20000008
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e041      	b.n	800301e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe fa6e 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 f936 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_ConfigClockSource+0x1c>
 800303e:	2302      	movs	r3, #2
 8003040:	e0b4      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x186>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003060:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003068:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	d03e      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0xd4>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003080:	f200 8087 	bhi.w	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003088:	f000 8086 	beq.w	8003198 <HAL_TIM_ConfigClockSource+0x172>
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003090:	d87f      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 8003092:	2b70      	cmp	r3, #112	@ 0x70
 8003094:	d01a      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xa6>
 8003096:	2b70      	cmp	r3, #112	@ 0x70
 8003098:	d87b      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 800309a:	2b60      	cmp	r3, #96	@ 0x60
 800309c:	d050      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x11a>
 800309e:	2b60      	cmp	r3, #96	@ 0x60
 80030a0:	d877      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 80030a2:	2b50      	cmp	r3, #80	@ 0x50
 80030a4:	d03c      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xfa>
 80030a6:	2b50      	cmp	r3, #80	@ 0x50
 80030a8:	d873      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d058      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x13a>
 80030ae:	2b40      	cmp	r3, #64	@ 0x40
 80030b0:	d86f      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 80030b2:	2b30      	cmp	r3, #48	@ 0x30
 80030b4:	d064      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15a>
 80030b6:	2b30      	cmp	r3, #48	@ 0x30
 80030b8:	d86b      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d060      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15a>
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d867      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d05c      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15a>
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d05a      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15a>
 80030ca:	e062      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030dc:	f000 fa22 	bl	8003524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]
      break;
 80030f8:	e04f      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800310a:	f000 fa0b 	bl	8003524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e03c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f982 	bl	8003436 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2150      	movs	r1, #80	@ 0x50
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f9d9 	bl	80034f0 <TIM_ITRx_SetConfig>
      break;
 800313e:	e02c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800314c:	461a      	mov	r2, r3
 800314e:	f000 f9a0 	bl	8003492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2160      	movs	r1, #96	@ 0x60
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f9c9 	bl	80034f0 <TIM_ITRx_SetConfig>
      break;
 800315e:	e01c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316c:	461a      	mov	r2, r3
 800316e:	f000 f962 	bl	8003436 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2140      	movs	r1, #64	@ 0x40
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f9b9 	bl	80034f0 <TIM_ITRx_SetConfig>
      break;
 800317e:	e00c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 f9b0 	bl	80034f0 <TIM_ITRx_SetConfig>
      break;
 8003190:	e003      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      break;
 8003196:	e000      	b.n	800319a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e031      	b.n	8003230 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f898 	bl	8003314 <TIM_SlaveTimer_SetConfig>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e018      	b.n	8003230 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800320c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800321c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2f      	ldr	r2, [pc, #188]	@ (8003308 <TIM_Base_SetConfig+0xd0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x30>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x30>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a2c      	ldr	r2, [pc, #176]	@ (800330c <TIM_Base_SetConfig+0xd4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x30>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <TIM_Base_SetConfig+0xd8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <TIM_Base_SetConfig+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <TIM_Base_SetConfig+0xd4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <TIM_Base_SetConfig+0xd8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <TIM_Base_SetConfig+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f023 0201 	bic.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	611a      	str	r2, [r3, #16]
  }
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800

08003314 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003330:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f023 0307 	bic.w	r3, r3, #7
 8003342:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b70      	cmp	r3, #112	@ 0x70
 800335c:	d01a      	beq.n	8003394 <TIM_SlaveTimer_SetConfig+0x80>
 800335e:	2b70      	cmp	r3, #112	@ 0x70
 8003360:	d860      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 8003362:	2b60      	cmp	r3, #96	@ 0x60
 8003364:	d054      	beq.n	8003410 <TIM_SlaveTimer_SetConfig+0xfc>
 8003366:	2b60      	cmp	r3, #96	@ 0x60
 8003368:	d85c      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 800336a:	2b50      	cmp	r3, #80	@ 0x50
 800336c:	d046      	beq.n	80033fc <TIM_SlaveTimer_SetConfig+0xe8>
 800336e:	2b50      	cmp	r3, #80	@ 0x50
 8003370:	d858      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	d019      	beq.n	80033aa <TIM_SlaveTimer_SetConfig+0x96>
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	d854      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 800337a:	2b30      	cmp	r3, #48	@ 0x30
 800337c:	d055      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x116>
 800337e:	2b30      	cmp	r3, #48	@ 0x30
 8003380:	d850      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 8003382:	2b20      	cmp	r3, #32
 8003384:	d051      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x116>
 8003386:	2b20      	cmp	r3, #32
 8003388:	d84c      	bhi.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04d      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x116>
 800338e:	2b10      	cmp	r3, #16
 8003390:	d04b      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x116>
 8003392:	e047      	b.n	8003424 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80033a4:	f000 f8be 	bl	8003524 <TIM_ETR_SetConfig>
      break;
 80033a8:	e040      	b.n	800342c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d101      	bne.n	80033b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e03b      	b.n	800342e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
      break;
 80033fa:	e017      	b.n	800342c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003408:	461a      	mov	r2, r3
 800340a:	f000 f814 	bl	8003436 <TIM_TI1_ConfigInputStage>
      break;
 800340e:	e00d      	b.n	800342c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341c:	461a      	mov	r2, r3
 800341e:	f000 f838 	bl	8003492 <TIM_TI2_ConfigInputStage>
      break;
 8003422:	e003      	b.n	800342c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
      break;
 8003428:	e000      	b.n	800342c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800342a:	bf00      	nop
  }

  return status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f023 0201 	bic.w	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 030a 	bic.w	r3, r3, #10
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 0210 	bic.w	r2, r3, #16
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	f043 0307 	orr.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800353e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	431a      	orrs	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003578:	2302      	movs	r3, #2
 800357a:	e046      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a10      	ldr	r2, [pc, #64]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800

08003620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e042      	b.n	80036b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd ff3e 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f82b 	bl	80036c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036fa:	f023 030c 	bic.w	r3, r3, #12
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	430b      	orrs	r3, r1
 8003706:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <UART_SetConfig+0x114>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7ff fbfc 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	e002      	b.n	8003736 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7ff fbe4 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8003734:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <UART_SetConfig+0x118>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	0119      	lsls	r1, r3, #4
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <UART_SetConfig+0x118>)
 800376e:	fba3 0302 	umull	r0, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2064      	movs	r0, #100	@ 0x64
 8003776:	fb00 f303 	mul.w	r3, r0, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	@ 0x32
 8003780:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <UART_SetConfig+0x118>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800378c:	4419      	add	r1, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009a      	lsls	r2, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <UART_SetConfig+0x118>)
 80037a6:	fba3 0302 	umull	r0, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2064      	movs	r0, #100	@ 0x64
 80037ae:	fb00 f303 	mul.w	r3, r0, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	@ 0x32
 80037b8:	4a07      	ldr	r2, [pc, #28]	@ (80037d8 <UART_SetConfig+0x118>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	440a      	add	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40013800 	.word	0x40013800
 80037d8:	51eb851f 	.word	0x51eb851f

080037dc <memset>:
 80037dc:	4603      	mov	r3, r0
 80037de:	4402      	add	r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	@ (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000014 	.word	0x20000014

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003830 <__libc_init_array+0x38>)
 80037fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	f000 f95e 	bl	8003ac8 <_init>
 800380c:	2600      	movs	r6, #0
 800380e:	4d0a      	ldr	r5, [pc, #40]	@ (8003838 <__libc_init_array+0x40>)
 8003810:	4c0a      	ldr	r4, [pc, #40]	@ (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08006404 	.word	0x08006404
 8003834:	08006404 	.word	0x08006404
 8003838:	08006404 	.word	0x08006404
 800383c:	08006408 	.word	0x08006408

08003840 <expf>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4605      	mov	r5, r0
 8003844:	f000 f82a 	bl	800389c <__ieee754_expf>
 8003848:	4604      	mov	r4, r0
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f81e 	bl	800388c <finitef>
 8003850:	b150      	cbz	r0, 8003868 <expf+0x28>
 8003852:	4628      	mov	r0, r5
 8003854:	490b      	ldr	r1, [pc, #44]	@ (8003884 <expf+0x44>)
 8003856:	f7fc ff43 	bl	80006e0 <__aeabi_fcmpgt>
 800385a:	b138      	cbz	r0, 800386c <expf+0x2c>
 800385c:	f7ff ffc6 	bl	80037ec <__errno>
 8003860:	2322      	movs	r3, #34	@ 0x22
 8003862:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 8003866:	6003      	str	r3, [r0, #0]
 8003868:	4620      	mov	r0, r4
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	4628      	mov	r0, r5
 800386e:	4906      	ldr	r1, [pc, #24]	@ (8003888 <expf+0x48>)
 8003870:	f7fc ff18 	bl	80006a4 <__aeabi_fcmplt>
 8003874:	2800      	cmp	r0, #0
 8003876:	d0f7      	beq.n	8003868 <expf+0x28>
 8003878:	f7ff ffb8 	bl	80037ec <__errno>
 800387c:	2322      	movs	r3, #34	@ 0x22
 800387e:	2400      	movs	r4, #0
 8003880:	6003      	str	r3, [r0, #0]
 8003882:	e7f1      	b.n	8003868 <expf+0x28>
 8003884:	42b17217 	.word	0x42b17217
 8003888:	c2cff1b5 	.word	0xc2cff1b5

0800388c <finitef>:
 800388c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003890:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003894:	bfac      	ite	ge
 8003896:	2000      	movge	r0, #0
 8003898:	2001      	movlt	r0, #1
 800389a:	4770      	bx	lr

0800389c <__ieee754_expf>:
 800389c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80038a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80038a8:	4604      	mov	r4, r0
 80038aa:	d904      	bls.n	80038b6 <__ieee754_expf+0x1a>
 80038ac:	4601      	mov	r1, r0
 80038ae:	f7fc fc53 	bl	8000158 <__addsf3>
 80038b2:	4604      	mov	r4, r0
 80038b4:	e005      	b.n	80038c2 <__ieee754_expf+0x26>
 80038b6:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 80038ba:	d105      	bne.n	80038c8 <__ieee754_expf+0x2c>
 80038bc:	2e00      	cmp	r6, #0
 80038be:	f040 80c3 	bne.w	8003a48 <__ieee754_expf+0x1ac>
 80038c2:	4620      	mov	r0, r4
 80038c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c8:	4960      	ldr	r1, [pc, #384]	@ (8003a4c <__ieee754_expf+0x1b0>)
 80038ca:	4288      	cmp	r0, r1
 80038cc:	dd04      	ble.n	80038d8 <__ieee754_expf+0x3c>
 80038ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d2:	2000      	movs	r0, #0
 80038d4:	f000 b8f3 	b.w	8003abe <__math_oflowf>
 80038d8:	2800      	cmp	r0, #0
 80038da:	da07      	bge.n	80038ec <__ieee754_expf+0x50>
 80038dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <__ieee754_expf+0x1b4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d904      	bls.n	80038ec <__ieee754_expf+0x50>
 80038e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e6:	2000      	movs	r0, #0
 80038e8:	f000 b8e5 	b.w	8003ab6 <__math_uflowf>
 80038ec:	4a59      	ldr	r2, [pc, #356]	@ (8003a54 <__ieee754_expf+0x1b8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d971      	bls.n	80039d6 <__ieee754_expf+0x13a>
 80038f2:	4a59      	ldr	r2, [pc, #356]	@ (8003a58 <__ieee754_expf+0x1bc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d851      	bhi.n	800399c <__ieee754_expf+0x100>
 80038f8:	4b58      	ldr	r3, [pc, #352]	@ (8003a5c <__ieee754_expf+0x1c0>)
 80038fa:	4620      	mov	r0, r4
 80038fc:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003900:	f7fc fc28 	bl	8000154 <__aeabi_fsub>
 8003904:	4605      	mov	r5, r0
 8003906:	4b56      	ldr	r3, [pc, #344]	@ (8003a60 <__ieee754_expf+0x1c4>)
 8003908:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800390c:	f1c6 0301 	rsb	r3, r6, #1
 8003910:	eba3 0806 	sub.w	r8, r3, r6
 8003914:	4639      	mov	r1, r7
 8003916:	4628      	mov	r0, r5
 8003918:	f7fc fc1c 	bl	8000154 <__aeabi_fsub>
 800391c:	4604      	mov	r4, r0
 800391e:	4621      	mov	r1, r4
 8003920:	4620      	mov	r0, r4
 8003922:	f7fc fd21 	bl	8000368 <__aeabi_fmul>
 8003926:	4606      	mov	r6, r0
 8003928:	494e      	ldr	r1, [pc, #312]	@ (8003a64 <__ieee754_expf+0x1c8>)
 800392a:	f7fc fd1d 	bl	8000368 <__aeabi_fmul>
 800392e:	494e      	ldr	r1, [pc, #312]	@ (8003a68 <__ieee754_expf+0x1cc>)
 8003930:	f7fc fc10 	bl	8000154 <__aeabi_fsub>
 8003934:	4631      	mov	r1, r6
 8003936:	f7fc fd17 	bl	8000368 <__aeabi_fmul>
 800393a:	494c      	ldr	r1, [pc, #304]	@ (8003a6c <__ieee754_expf+0x1d0>)
 800393c:	f7fc fc0c 	bl	8000158 <__addsf3>
 8003940:	4631      	mov	r1, r6
 8003942:	f7fc fd11 	bl	8000368 <__aeabi_fmul>
 8003946:	494a      	ldr	r1, [pc, #296]	@ (8003a70 <__ieee754_expf+0x1d4>)
 8003948:	f7fc fc04 	bl	8000154 <__aeabi_fsub>
 800394c:	4631      	mov	r1, r6
 800394e:	f7fc fd0b 	bl	8000368 <__aeabi_fmul>
 8003952:	4948      	ldr	r1, [pc, #288]	@ (8003a74 <__ieee754_expf+0x1d8>)
 8003954:	f7fc fc00 	bl	8000158 <__addsf3>
 8003958:	4631      	mov	r1, r6
 800395a:	f7fc fd05 	bl	8000368 <__aeabi_fmul>
 800395e:	4601      	mov	r1, r0
 8003960:	4620      	mov	r0, r4
 8003962:	f7fc fbf7 	bl	8000154 <__aeabi_fsub>
 8003966:	4601      	mov	r1, r0
 8003968:	4606      	mov	r6, r0
 800396a:	4620      	mov	r0, r4
 800396c:	f7fc fcfc 	bl	8000368 <__aeabi_fmul>
 8003970:	4681      	mov	r9, r0
 8003972:	f1b8 0f00 	cmp.w	r8, #0
 8003976:	d143      	bne.n	8003a00 <__ieee754_expf+0x164>
 8003978:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800397c:	4630      	mov	r0, r6
 800397e:	f7fc fbe9 	bl	8000154 <__aeabi_fsub>
 8003982:	4601      	mov	r1, r0
 8003984:	4648      	mov	r0, r9
 8003986:	f7fc fda3 	bl	80004d0 <__aeabi_fdiv>
 800398a:	4621      	mov	r1, r4
 800398c:	f7fc fbe2 	bl	8000154 <__aeabi_fsub>
 8003990:	4601      	mov	r1, r0
 8003992:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003996:	f7fc fbdd 	bl	8000154 <__aeabi_fsub>
 800399a:	e78a      	b.n	80038b2 <__ieee754_expf+0x16>
 800399c:	4936      	ldr	r1, [pc, #216]	@ (8003a78 <__ieee754_expf+0x1dc>)
 800399e:	4620      	mov	r0, r4
 80039a0:	f7fc fce2 	bl	8000368 <__aeabi_fmul>
 80039a4:	4b35      	ldr	r3, [pc, #212]	@ (8003a7c <__ieee754_expf+0x1e0>)
 80039a6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80039aa:	f7fc fbd5 	bl	8000158 <__addsf3>
 80039ae:	f7fc fea1 	bl	80006f4 <__aeabi_f2iz>
 80039b2:	4680      	mov	r8, r0
 80039b4:	f7fc fc84 	bl	80002c0 <__aeabi_i2f>
 80039b8:	4931      	ldr	r1, [pc, #196]	@ (8003a80 <__ieee754_expf+0x1e4>)
 80039ba:	4606      	mov	r6, r0
 80039bc:	f7fc fcd4 	bl	8000368 <__aeabi_fmul>
 80039c0:	4601      	mov	r1, r0
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fc fbc6 	bl	8000154 <__aeabi_fsub>
 80039c8:	492e      	ldr	r1, [pc, #184]	@ (8003a84 <__ieee754_expf+0x1e8>)
 80039ca:	4605      	mov	r5, r0
 80039cc:	4630      	mov	r0, r6
 80039ce:	f7fc fccb 	bl	8000368 <__aeabi_fmul>
 80039d2:	4607      	mov	r7, r0
 80039d4:	e79e      	b.n	8003914 <__ieee754_expf+0x78>
 80039d6:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80039da:	d20c      	bcs.n	80039f6 <__ieee754_expf+0x15a>
 80039dc:	492a      	ldr	r1, [pc, #168]	@ (8003a88 <__ieee754_expf+0x1ec>)
 80039de:	4620      	mov	r0, r4
 80039e0:	f7fc fbba 	bl	8000158 <__addsf3>
 80039e4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80039e8:	f7fc fe7a 	bl	80006e0 <__aeabi_fcmpgt>
 80039ec:	b130      	cbz	r0, 80039fc <__ieee754_expf+0x160>
 80039ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80039f2:	4620      	mov	r0, r4
 80039f4:	e75b      	b.n	80038ae <__ieee754_expf+0x12>
 80039f6:	f04f 0800 	mov.w	r8, #0
 80039fa:	e790      	b.n	800391e <__ieee754_expf+0x82>
 80039fc:	4680      	mov	r8, r0
 80039fe:	e78e      	b.n	800391e <__ieee754_expf+0x82>
 8003a00:	4631      	mov	r1, r6
 8003a02:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a06:	f7fc fba5 	bl	8000154 <__aeabi_fsub>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4648      	mov	r0, r9
 8003a0e:	f7fc fd5f 	bl	80004d0 <__aeabi_fdiv>
 8003a12:	4601      	mov	r1, r0
 8003a14:	4638      	mov	r0, r7
 8003a16:	f7fc fb9d 	bl	8000154 <__aeabi_fsub>
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fb9a 	bl	8000154 <__aeabi_fsub>
 8003a20:	4601      	mov	r1, r0
 8003a22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a26:	f7fc fb95 	bl	8000154 <__aeabi_fsub>
 8003a2a:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 8003a2e:	db02      	blt.n	8003a36 <__ieee754_expf+0x19a>
 8003a30:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8003a34:	e745      	b.n	80038c2 <__ieee754_expf+0x26>
 8003a36:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8003a3a:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 8003a3e:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 8003a42:	f7fc fc91 	bl	8000368 <__aeabi_fmul>
 8003a46:	e734      	b.n	80038b2 <__ieee754_expf+0x16>
 8003a48:	2400      	movs	r4, #0
 8003a4a:	e73a      	b.n	80038c2 <__ieee754_expf+0x26>
 8003a4c:	42b17217 	.word	0x42b17217
 8003a50:	42cff1b5 	.word	0x42cff1b5
 8003a54:	3eb17218 	.word	0x3eb17218
 8003a58:	3f851591 	.word	0x3f851591
 8003a5c:	080063f4 	.word	0x080063f4
 8003a60:	080063ec 	.word	0x080063ec
 8003a64:	3331bb4c 	.word	0x3331bb4c
 8003a68:	35ddea0e 	.word	0x35ddea0e
 8003a6c:	388ab355 	.word	0x388ab355
 8003a70:	3b360b61 	.word	0x3b360b61
 8003a74:	3e2aaaab 	.word	0x3e2aaaab
 8003a78:	3fb8aa3b 	.word	0x3fb8aa3b
 8003a7c:	080063fc 	.word	0x080063fc
 8003a80:	3f317180 	.word	0x3f317180
 8003a84:	3717f7d1 	.word	0x3717f7d1
 8003a88:	7149f2ca 	.word	0x7149f2ca

08003a8c <with_errnof>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	460d      	mov	r5, r1
 8003a92:	f7ff feab 	bl	80037ec <__errno>
 8003a96:	6005      	str	r5, [r0, #0]
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}

08003a9c <xflowf>:
 8003a9c:	b508      	push	{r3, lr}
 8003a9e:	b140      	cbz	r0, 8003ab2 <xflowf+0x16>
 8003aa0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8003aa4:	f7fc fc60 	bl	8000368 <__aeabi_fmul>
 8003aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003aac:	2122      	movs	r1, #34	@ 0x22
 8003aae:	f7ff bfed 	b.w	8003a8c <with_errnof>
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	e7f6      	b.n	8003aa4 <xflowf+0x8>

08003ab6 <__math_uflowf>:
 8003ab6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8003aba:	f7ff bfef 	b.w	8003a9c <xflowf>

08003abe <__math_oflowf>:
 8003abe:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8003ac2:	f7ff bfeb 	b.w	8003a9c <xflowf>
	...

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
