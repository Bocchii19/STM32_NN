
ColorSorter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800489c  0800489c  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  0800489c  0800489c  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800489c  0800489c  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080048a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000064  08004908  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08004908  000066c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb33  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  00014bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00016bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c36  00000000  00000000  00017b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018412  00000000  00000000  00018776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124a1  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d20e  00000000  00000000  00043029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  000d027c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d4954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aa4 	.word	0x08003aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003aa4 	.word	0x08003aa4

0800014c <TCS3200_Init>:
            buttonPressed = 1; // Đánh dấu nút đã được nhấn
        }
    }
}

void TCS3200_Init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4804      	ldr	r0, [pc, #16]	@ (8000168 <TCS3200_Init+0x1c>)
 8000156:	f001 f9d8 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2102      	movs	r1, #2
 800015e:	4802      	ldr	r0, [pc, #8]	@ (8000168 <TCS3200_Init+0x1c>)
 8000160:	f001 f9d3 	bl	800150a <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010800 	.word	0x40010800

0800016c <TCS3200_SetFilter>:

void TCS3200_SetFilter(uint8_t filter) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
    switch (filter) {
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	2b02      	cmp	r3, #2
 800017a:	d01c      	beq.n	80001b6 <TCS3200_SetFilter+0x4a>
 800017c:	2b02      	cmp	r3, #2
 800017e:	dc25      	bgt.n	80001cc <TCS3200_SetFilter+0x60>
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <TCS3200_SetFilter+0x1e>
 8000184:	2b01      	cmp	r3, #1
 8000186:	d00b      	beq.n	80001a0 <TCS3200_SetFilter+0x34>
        case 2: // Blue
            HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
            break;
        default:
            break;
 8000188:	e020      	b.n	80001cc <TCS3200_SetFilter+0x60>
            HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	2104      	movs	r1, #4
 800018e:	4812      	ldr	r0, [pc, #72]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 8000190:	f001 f9bb 	bl	800150a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2108      	movs	r1, #8
 8000198:	480f      	ldr	r0, [pc, #60]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 800019a:	f001 f9b6 	bl	800150a <HAL_GPIO_WritePin>
            break;
 800019e:	e016      	b.n	80001ce <TCS3200_SetFilter+0x62>
            HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2104      	movs	r1, #4
 80001a4:	480c      	ldr	r0, [pc, #48]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 80001a6:	f001 f9b0 	bl	800150a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 80001aa:	2201      	movs	r2, #1
 80001ac:	2108      	movs	r1, #8
 80001ae:	480a      	ldr	r0, [pc, #40]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 80001b0:	f001 f9ab 	bl	800150a <HAL_GPIO_WritePin>
            break;
 80001b4:	e00b      	b.n	80001ce <TCS3200_SetFilter+0x62>
            HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2104      	movs	r1, #4
 80001ba:	4807      	ldr	r0, [pc, #28]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 80001bc:	f001 f9a5 	bl	800150a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2108      	movs	r1, #8
 80001c4:	4804      	ldr	r0, [pc, #16]	@ (80001d8 <TCS3200_SetFilter+0x6c>)
 80001c6:	f001 f9a0 	bl	800150a <HAL_GPIO_WritePin>
            break;
 80001ca:	e000      	b.n	80001ce <TCS3200_SetFilter+0x62>
            break;
 80001cc:	bf00      	nop
    }
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010800 	.word	0x40010800

080001dc <TCS3200_ReadFrequency>:
uint32_t TCS3200_ReadFrequency() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    uint32_t count = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
    uint32_t timeout = HAL_GetTick() + 1000; // 1 giây timeout
 80001e6:	f000 fee3 	bl	8000fb0 <HAL_GetTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80001f0:	603b      	str	r3, [r7, #0]
    while (HAL_GetTick() < timeout) {
 80001f2:	e011      	b.n	8000218 <TCS3200_ReadFrequency+0x3c>
        if (HAL_GPIO_ReadPin(OUT_GPIO_Port, OUT_Pin) == GPIO_PIN_SET) {
 80001f4:	2110      	movs	r1, #16
 80001f6:	480e      	ldr	r0, [pc, #56]	@ (8000230 <TCS3200_ReadFrequency+0x54>)
 80001f8:	f001 f970 	bl	80014dc <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10a      	bne.n	8000218 <TCS3200_ReadFrequency+0x3c>
            count++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3301      	adds	r3, #1
 8000206:	607b      	str	r3, [r7, #4]
            while (HAL_GPIO_ReadPin(OUT_GPIO_Port, OUT_Pin) == GPIO_PIN_SET);
 8000208:	bf00      	nop
 800020a:	2110      	movs	r1, #16
 800020c:	4808      	ldr	r0, [pc, #32]	@ (8000230 <TCS3200_ReadFrequency+0x54>)
 800020e:	f001 f965 	bl	80014dc <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d0f8      	beq.n	800020a <TCS3200_ReadFrequency+0x2e>
    while (HAL_GetTick() < timeout) {
 8000218:	f000 feca 	bl	8000fb0 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	4293      	cmp	r3, r2
 8000222:	d8e7      	bhi.n	80001f4 <TCS3200_ReadFrequency+0x18>
        }
    }
    return count;
 8000224:	687b      	ldr	r3, [r7, #4]
}
 8000226:	4618      	mov	r0, r3
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800

08000234 <NormalizeToRGB>:

uint8_t NormalizeToRGB(uint32_t freq, uint32_t minFreq, uint32_t maxFreq) {
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
    if (freq < minFreq) freq = minFreq;
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	429a      	cmp	r2, r3
 8000246:	d201      	bcs.n	800024c <NormalizeToRGB+0x18>
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	60fb      	str	r3, [r7, #12]
    if (freq > maxFreq) freq = maxFreq;
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	429a      	cmp	r2, r3
 8000252:	d901      	bls.n	8000258 <NormalizeToRGB+0x24>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	60fb      	str	r3, [r7, #12]
    return (uint8_t)(((freq - minFreq) * 255) / (maxFreq - minFreq));
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	1ad2      	subs	r2, r2, r3
 800025e:	4613      	mov	r3, r2
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	1acb      	subs	r3, r1, r3
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	b2db      	uxtb	r3, r3
}
 8000270:	4618      	mov	r0, r3
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <TCS3200_ReadRGB>:

void TCS3200_ReadRGB(uint32_t *red, uint32_t *green, uint32_t *blue) {
 800027a:	b580      	push	{r7, lr}
 800027c:	b088      	sub	sp, #32
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
    uint32_t rawRed, rawGreen, rawBlue;

    // Đọc giá trị tần số thô từ cảm biến
    TCS3200_SetFilter(0); // Chọn bộ lọc Red
 8000286:	2000      	movs	r0, #0
 8000288:	f7ff ff70 	bl	800016c <TCS3200_SetFilter>
    HAL_Delay(50);       // Chờ ổn định
 800028c:	2032      	movs	r0, #50	@ 0x32
 800028e:	f000 fe99 	bl	8000fc4 <HAL_Delay>
    rawRed = TCS3200_ReadFrequency();
 8000292:	f7ff ffa3 	bl	80001dc <TCS3200_ReadFrequency>
 8000296:	61f8      	str	r0, [r7, #28]

    TCS3200_SetFilter(1); // Chọn bộ lọc Green
 8000298:	2001      	movs	r0, #1
 800029a:	f7ff ff67 	bl	800016c <TCS3200_SetFilter>
    HAL_Delay(50);
 800029e:	2032      	movs	r0, #50	@ 0x32
 80002a0:	f000 fe90 	bl	8000fc4 <HAL_Delay>
    rawGreen = TCS3200_ReadFrequency();
 80002a4:	f7ff ff9a 	bl	80001dc <TCS3200_ReadFrequency>
 80002a8:	61b8      	str	r0, [r7, #24]

    TCS3200_SetFilter(2); // Chọn bộ lọc Blue
 80002aa:	2002      	movs	r0, #2
 80002ac:	f7ff ff5e 	bl	800016c <TCS3200_SetFilter>
    HAL_Delay(50);
 80002b0:	2032      	movs	r0, #50	@ 0x32
 80002b2:	f000 fe87 	bl	8000fc4 <HAL_Delay>
    rawBlue = TCS3200_ReadFrequency();
 80002b6:	f7ff ff91 	bl	80001dc <TCS3200_ReadFrequency>
 80002ba:	6178      	str	r0, [r7, #20]

    // Chuẩn hóa giá trị tần số thành thang đo 0-255
    *red = NormalizeToRGB(rawRed, RED_Min, RED_Max);
 80002bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80002c0:	2164      	movs	r1, #100	@ 0x64
 80002c2:	69f8      	ldr	r0, [r7, #28]
 80002c4:	f7ff ffb6 	bl	8000234 <NormalizeToRGB>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	601a      	str	r2, [r3, #0]
    *green = NormalizeToRGB(rawGreen, GREEN_Min, GREEN_Max);
 80002d0:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80002d4:	2196      	movs	r1, #150	@ 0x96
 80002d6:	69b8      	ldr	r0, [r7, #24]
 80002d8:	f7ff ffac 	bl	8000234 <NormalizeToRGB>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
    *blue = NormalizeToRGB(rawBlue, BLUE_Min, BLUE_Max);
 80002e4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80002e8:	21c8      	movs	r1, #200	@ 0xc8
 80002ea:	6978      	ldr	r0, [r7, #20]
 80002ec:	f7ff ffa2 	bl	8000234 <NormalizeToRGB>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	3720      	adds	r7, #32
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <main>:

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0

  HAL_Init();
 8000306:	f000 fdfb 	bl	8000f00 <HAL_Init>
  SystemClock_Config();
 800030a:	f000 f885 	bl	8000418 <SystemClock_Config>
  MX_GPIO_Init();
 800030e:	f000 f97f 	bl	8000610 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000312:	f000 f8c1 	bl	8000498 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000316:	f000 f8ed 	bl	80004f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800031a:	f000 f94f 	bl	80005bc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800031e:	f000 f9c7 	bl	80006b0 <SSD1306_Init>
  TCS3200_Init();
 8000322:	f7ff ff13 	bl	800014c <TCS3200_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    if (HAL_GPIO_ReadPin(GPIOA, BUTTON) == GPIO_PIN_SET) // Nếu nút được nhấn
 8000326:	2120      	movs	r1, #32
 8000328:	4834      	ldr	r0, [pc, #208]	@ (80003fc <main+0xfc>)
 800032a:	f001 f8d7 	bl	80014dc <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b01      	cmp	r3, #1
 8000332:	d10c      	bne.n	800034e <main+0x4e>
	    {
	        HAL_Delay(50); // Chống rung phím
 8000334:	2032      	movs	r0, #50	@ 0x32
 8000336:	f000 fe45 	bl	8000fc4 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOA, BUTTON) == GPIO_PIN_SET) // Kiểm tra lại nút
 800033a:	2120      	movs	r1, #32
 800033c:	482f      	ldr	r0, [pc, #188]	@ (80003fc <main+0xfc>)
 800033e:	f001 f8cd 	bl	80014dc <HAL_GPIO_ReadPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b01      	cmp	r3, #1
 8000346:	d102      	bne.n	800034e <main+0x4e>
	        {
	            buttonPressed = 1; // Đánh dấu nút đã nhấn
 8000348:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <main+0x100>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
	        }
	    }

	    if (buttonPressed)
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <main+0x100>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	2b00      	cmp	r3, #0
 8000356:	d00d      	beq.n	8000374 <main+0x74>
	    {
	        displayPaused = !displayPaused; // Đổi trạng thái hiển thị
 8000358:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <main+0x104>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf0c      	ite	eq
 8000362:	2301      	moveq	r3, #1
 8000364:	2300      	movne	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <main+0x104>)
 800036c:	701a      	strb	r2, [r3, #0]
	        buttonPressed = 0;             // Đặt lại trạng thái nút nhấn
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <main+0x100>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
	    }

	    if (!displayPaused) // Nếu không tạm dừng hiển thị
 8000374:	4b23      	ldr	r3, [pc, #140]	@ (8000404 <main+0x104>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1d3      	bne.n	8000326 <main+0x26>
	    {
	        // Đọc giá trị RGB từ cảm biến
	        TCS3200_ReadRGB(&red, &green, &blue);
 800037e:	f107 0214 	add.w	r2, r7, #20
 8000382:	f107 0118 	add.w	r1, r7, #24
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff75 	bl	800027a <TCS3200_ReadRGB>

	        // Hiển thị dữ liệu lên màn hình SSD1306
	        SSD1306_Clear();
 8000390:	f000 fbaf 	bl	8000af2 <SSD1306_Clear>
	        sprintf(buffer, "Red: %lu", red);
 8000394:	69fa      	ldr	r2, [r7, #28]
 8000396:	463b      	mov	r3, r7
 8000398:	491b      	ldr	r1, [pc, #108]	@ (8000408 <main+0x108>)
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fed2 	bl	8003144 <siprintf>
	        SSD1306_GotoXY(0, 0);
 80003a0:	2100      	movs	r1, #0
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 faec 	bl	8000980 <SSD1306_GotoXY>
	        SSD1306_Puts(buffer, &Font_11x18, 1);
 80003a8:	463b      	mov	r3, r7
 80003aa:	2201      	movs	r2, #1
 80003ac:	4917      	ldr	r1, [pc, #92]	@ (800040c <main+0x10c>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fb7a 	bl	8000aa8 <SSD1306_Puts>

	        sprintf(buffer, "Green: %lu", green);
 80003b4:	69ba      	ldr	r2, [r7, #24]
 80003b6:	463b      	mov	r3, r7
 80003b8:	4915      	ldr	r1, [pc, #84]	@ (8000410 <main+0x110>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fec2 	bl	8003144 <siprintf>
	        SSD1306_GotoXY(0, 20);
 80003c0:	2114      	movs	r1, #20
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 fadc 	bl	8000980 <SSD1306_GotoXY>
	        SSD1306_Puts(buffer, &Font_11x18, 1);
 80003c8:	463b      	mov	r3, r7
 80003ca:	2201      	movs	r2, #1
 80003cc:	490f      	ldr	r1, [pc, #60]	@ (800040c <main+0x10c>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fb6a 	bl	8000aa8 <SSD1306_Puts>

	        sprintf(buffer, "Blue: %lu", blue);
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	463b      	mov	r3, r7
 80003d8:	490e      	ldr	r1, [pc, #56]	@ (8000414 <main+0x114>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 feb2 	bl	8003144 <siprintf>
	        SSD1306_GotoXY(0, 40);
 80003e0:	2128      	movs	r1, #40	@ 0x28
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 facc 	bl	8000980 <SSD1306_GotoXY>
	        SSD1306_Puts(buffer, &Font_11x18, 1);
 80003e8:	463b      	mov	r3, r7
 80003ea:	2201      	movs	r2, #1
 80003ec:	4907      	ldr	r1, [pc, #28]	@ (800040c <main+0x10c>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fb5a 	bl	8000aa8 <SSD1306_Puts>

	        SSD1306_UpdateScreen();
 80003f4:	f000 fa20 	bl	8000838 <SSD1306_UpdateScreen>
	    if (HAL_GPIO_ReadPin(GPIOA, BUTTON) == GPIO_PIN_SET) // Nếu nút được nhấn
 80003f8:	e795      	b.n	8000326 <main+0x26>
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800
 8000400:	20000164 	.word	0x20000164
 8000404:	20000165 	.word	0x20000165
 8000408:	08003abc 	.word	0x08003abc
 800040c:	20000000 	.word	0x20000000
 8000410:	08003ac8 	.word	0x08003ac8
 8000414:	08003ad4 	.word	0x08003ad4

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b090      	sub	sp, #64	@ 0x40
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2228      	movs	r2, #40	@ 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 feac 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000442:	2310      	movs	r3, #16
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800044a:	2300      	movs	r3, #0
 800044c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fe39 	bl	80020d0 <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000464:	f000 f91e 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2302      	movs	r3, #2
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2101      	movs	r1, #1
 8000480:	4618      	mov	r0, r3
 8000482:	f002 f8a7 	bl	80025d4 <HAL_RCC_ClockConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800048c:	f000 f90a 	bl	80006a4 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3740      	adds	r7, #64	@ 0x40
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800049c:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <MX_I2C1_Init+0x50>)
 800049e:	4a13      	ldr	r2, [pc, #76]	@ (80004ec <MX_I2C1_Init+0x54>)
 80004a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004a4:	4a12      	ldr	r2, [pc, #72]	@ (80004f0 <MX_I2C1_Init+0x58>)
 80004a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <MX_I2C1_Init+0x50>)
 80004d6:	f001 f831 	bl	800153c <HAL_I2C_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004e0:	f000 f8e0 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000080 	.word	0x20000080
 80004ec:	40005400 	.word	0x40005400
 80004f0:	00061a80 	.word	0x00061a80

080004f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000520:	4b25      	ldr	r3, [pc, #148]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052e:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000536:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800053a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000548:	481b      	ldr	r0, [pc, #108]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 800054a:	f002 f9d1 	bl	80028f0 <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000554:	f000 f8a6 	bl	80006a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800055c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	4619      	mov	r1, r3
 8000564:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000566:	f002 fa12 	bl	800298e <HAL_TIM_ConfigClockSource>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000570:	f000 f898 	bl	80006a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 8000584:	f002 faca 	bl	8002b1c <HAL_TIM_SlaveConfigSynchro>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800058e:	f000 f889 	bl	80006a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4619      	mov	r1, r3
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <MX_TIM2_Init+0xc4>)
 80005a0:	f002 fc94 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80005aa:	f000 f87b 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	3730      	adds	r7, #48	@ 0x30
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200000d4 	.word	0x200000d4

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f002 fcc8 	bl	8002f88 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f851 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000011c 	.word	0x2000011c
 800060c:	40013800 	.word	0x40013800

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <MX_GPIO_Init+0x8c>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_GPIO_Init+0x8c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_GPIO_Init+0x8c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000654:	2200      	movs	r2, #0
 8000656:	218f      	movs	r1, #143	@ 0x8f
 8000658:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <MX_GPIO_Init+0x90>)
 800065a:	f000 ff56 	bl	800150a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800065e:	238f      	movs	r3, #143	@ 0x8f
 8000660:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4619      	mov	r1, r3
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <MX_GPIO_Init+0x90>)
 8000676:	f000 fdad 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800067a:	2320      	movs	r3, #32
 800067c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x90>)
 800068e:	f000 fda1 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006b6:	f000 fa25 	bl	8000b04 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80006be:	2201      	movs	r2, #1
 80006c0:	2178      	movs	r1, #120	@ 0x78
 80006c2:	485b      	ldr	r0, [pc, #364]	@ (8000830 <SSD1306_Init+0x180>)
 80006c4:	f001 f97c 	bl	80019c0 <HAL_I2C_IsDeviceReady>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e0a9      	b.n	8000826 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80006d2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80006d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006d8:	e002      	b.n	80006e0 <SSD1306_Init+0x30>
		p--;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3b01      	subs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f9      	bne.n	80006da <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006e6:	22ae      	movs	r2, #174	@ 0xae
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 fa84 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80006f0:	2220      	movs	r2, #32
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	@ 0x78
 80006f6:	f000 fa7f 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006fa:	2210      	movs	r2, #16
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	@ 0x78
 8000700:	f000 fa7a 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000704:	22b0      	movs	r2, #176	@ 0xb0
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	@ 0x78
 800070a:	f000 fa75 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800070e:	22c8      	movs	r2, #200	@ 0xc8
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fa70 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	@ 0x78
 800071e:	f000 fa6b 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000722:	2210      	movs	r2, #16
 8000724:	2100      	movs	r1, #0
 8000726:	2078      	movs	r0, #120	@ 0x78
 8000728:	f000 fa66 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800072c:	2240      	movs	r2, #64	@ 0x40
 800072e:	2100      	movs	r1, #0
 8000730:	2078      	movs	r0, #120	@ 0x78
 8000732:	f000 fa61 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000736:	2281      	movs	r2, #129	@ 0x81
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	@ 0x78
 800073c:	f000 fa5c 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000740:	22ff      	movs	r2, #255	@ 0xff
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	@ 0x78
 8000746:	f000 fa57 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800074a:	22a1      	movs	r2, #161	@ 0xa1
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	@ 0x78
 8000750:	f000 fa52 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000754:	22a6      	movs	r2, #166	@ 0xa6
 8000756:	2100      	movs	r1, #0
 8000758:	2078      	movs	r0, #120	@ 0x78
 800075a:	f000 fa4d 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800075e:	22a8      	movs	r2, #168	@ 0xa8
 8000760:	2100      	movs	r1, #0
 8000762:	2078      	movs	r0, #120	@ 0x78
 8000764:	f000 fa48 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000768:	223f      	movs	r2, #63	@ 0x3f
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	@ 0x78
 800076e:	f000 fa43 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000772:	22a4      	movs	r2, #164	@ 0xa4
 8000774:	2100      	movs	r1, #0
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f000 fa3e 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800077c:	22d3      	movs	r2, #211	@ 0xd3
 800077e:	2100      	movs	r1, #0
 8000780:	2078      	movs	r0, #120	@ 0x78
 8000782:	f000 fa39 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2078      	movs	r0, #120	@ 0x78
 800078c:	f000 fa34 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000790:	22d5      	movs	r2, #213	@ 0xd5
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	@ 0x78
 8000796:	f000 fa2f 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800079a:	22f0      	movs	r2, #240	@ 0xf0
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	@ 0x78
 80007a0:	f000 fa2a 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007a4:	22d9      	movs	r2, #217	@ 0xd9
 80007a6:	2100      	movs	r1, #0
 80007a8:	2078      	movs	r0, #120	@ 0x78
 80007aa:	f000 fa25 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007ae:	2222      	movs	r2, #34	@ 0x22
 80007b0:	2100      	movs	r1, #0
 80007b2:	2078      	movs	r0, #120	@ 0x78
 80007b4:	f000 fa20 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007b8:	22da      	movs	r2, #218	@ 0xda
 80007ba:	2100      	movs	r1, #0
 80007bc:	2078      	movs	r0, #120	@ 0x78
 80007be:	f000 fa1b 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007c2:	2212      	movs	r2, #18
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	@ 0x78
 80007c8:	f000 fa16 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007cc:	22db      	movs	r2, #219	@ 0xdb
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	@ 0x78
 80007d2:	f000 fa11 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007d6:	2220      	movs	r2, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	@ 0x78
 80007dc:	f000 fa0c 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007e0:	228d      	movs	r2, #141	@ 0x8d
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	@ 0x78
 80007e6:	f000 fa07 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80007ea:	2214      	movs	r2, #20
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f000 fa02 	bl	8000bf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80007f4:	22af      	movs	r2, #175	@ 0xaf
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	@ 0x78
 80007fa:	f000 f9fd 	bl	8000bf8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007fe:	222e      	movs	r2, #46	@ 0x2e
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	@ 0x78
 8000804:	f000 f9f8 	bl	8000bf8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f843 	bl	8000894 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800080e:	f000 f813 	bl	8000838 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <SSD1306_Init+0x184>)
 8000814:	2200      	movs	r2, #0
 8000816:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <SSD1306_Init+0x184>)
 800081a:	2200      	movs	r2, #0
 800081c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <SSD1306_Init+0x184>)
 8000820:	2201      	movs	r2, #1
 8000822:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000080 	.word	0x20000080
 8000834:	20000568 	.word	0x20000568

08000838 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e01d      	b.n	8000880 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3b50      	subs	r3, #80	@ 0x50
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	2078      	movs	r0, #120	@ 0x78
 8000850:	f000 f9d2 	bl	8000bf8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2078      	movs	r0, #120	@ 0x78
 800085a:	f000 f9cd 	bl	8000bf8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800085e:	2210      	movs	r2, #16
 8000860:	2100      	movs	r1, #0
 8000862:	2078      	movs	r0, #120	@ 0x78
 8000864:	f000 f9c8 	bl	8000bf8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <SSD1306_UpdateScreen+0x58>)
 800086e:	441a      	add	r2, r3
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	2140      	movs	r1, #64	@ 0x40
 8000874:	2078      	movs	r0, #120	@ 0x78
 8000876:	f000 f959 	bl	8000b2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3301      	adds	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b07      	cmp	r3, #7
 8000884:	d9de      	bls.n	8000844 <SSD1306_UpdateScreen+0xc>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000168 	.word	0x20000168

08000894 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <SSD1306_Fill+0x14>
 80008a4:	2300      	movs	r3, #0
 80008a6:	e000      	b.n	80008aa <SSD1306_Fill+0x16>
 80008a8:	23ff      	movs	r3, #255	@ 0xff
 80008aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ae:	4619      	mov	r1, r3
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <SSD1306_Fill+0x2c>)
 80008b2:	f002 fc67 	bl	8003184 <memset>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000168 	.word	0x20000168

080008c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	460b      	mov	r3, r1
 80008d0:	80bb      	strh	r3, [r7, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	70fb      	strb	r3, [r7, #3]
	if (
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008da:	d848      	bhi.n	800096e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	2b3f      	cmp	r3, #63	@ 0x3f
 80008e0:	d845      	bhi.n	800096e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <SSD1306_DrawPixel+0xb4>)
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d11a      	bne.n	8000934 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	88bb      	ldrh	r3, [r7, #4]
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	b298      	uxth	r0, r3
 8000906:	4603      	mov	r3, r0
 8000908:	01db      	lsls	r3, r3, #7
 800090a:	4413      	add	r3, r2
 800090c:	4a1b      	ldr	r2, [pc, #108]	@ (800097c <SSD1306_DrawPixel+0xb8>)
 800090e:	5cd3      	ldrb	r3, [r2, r3]
 8000910:	b25a      	sxtb	r2, r3
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b259      	sxtb	r1, r3
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	4603      	mov	r3, r0
 8000928:	01db      	lsls	r3, r3, #7
 800092a:	4413      	add	r3, r2
 800092c:	b2c9      	uxtb	r1, r1
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <SSD1306_DrawPixel+0xb8>)
 8000930:	54d1      	strb	r1, [r2, r3]
 8000932:	e01d      	b.n	8000970 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	b298      	uxth	r0, r3
 800093c:	4603      	mov	r3, r0
 800093e:	01db      	lsls	r3, r3, #7
 8000940:	4413      	add	r3, r2
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <SSD1306_DrawPixel+0xb8>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	b25a      	sxtb	r2, r3
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	b25b      	sxtb	r3, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	b25b      	sxtb	r3, r3
 800095a:	4013      	ands	r3, r2
 800095c:	b259      	sxtb	r1, r3
 800095e:	88fa      	ldrh	r2, [r7, #6]
 8000960:	4603      	mov	r3, r0
 8000962:	01db      	lsls	r3, r3, #7
 8000964:	4413      	add	r3, r2
 8000966:	b2c9      	uxtb	r1, r1
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <SSD1306_DrawPixel+0xb8>)
 800096a:	54d1      	strb	r1, [r2, r3]
 800096c:	e000      	b.n	8000970 <SSD1306_DrawPixel+0xac>
		return;
 800096e:	bf00      	nop
	}
}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000568 	.word	0x20000568
 800097c:	20000168 	.word	0x20000168

08000980 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	80fb      	strh	r3, [r7, #6]
 800098c:	4613      	mov	r3, r2
 800098e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000990:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SSD1306_GotoXY+0x28>)
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <SSD1306_GotoXY+0x28>)
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	8053      	strh	r3, [r2, #2]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000568 	.word	0x20000568

080009ac <SSD1306_Putc>:



char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009bc:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
	if (
 80009c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ca:	dc07      	bgt.n	80009dc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009cc:	4b35      	ldr	r3, [pc, #212]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009da:	dd01      	ble.n	80009e0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	e05d      	b.n	8000a9c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e04b      	b.n	8000a7e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	3b20      	subs	r3, #32
 80009ee:	6839      	ldr	r1, [r7, #0]
 80009f0:	7849      	ldrb	r1, [r1, #1]
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e030      	b.n	8000a6c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d010      	beq.n	8000a3c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b298      	uxth	r0, r3
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a28:	885a      	ldrh	r2, [r3, #2]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f7ff ff45 	bl	80008c4 <SSD1306_DrawPixel>
 8000a3a:	e014      	b.n	8000a66 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a3e:	881a      	ldrh	r2, [r3, #0]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	b298      	uxth	r0, r3
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a4a:	885a      	ldrh	r2, [r3, #2]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	4413      	add	r3, r2
 8000a52:	b299      	uxth	r1, r3
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	f7ff ff2f 	bl	80008c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d3c8      	bcc.n	8000a0a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	461a      	mov	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d3ad      	bcc.n	80009e6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <SSD1306_Putc+0xf8>)
 8000a98:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000568 	.word	0x20000568

08000aa8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ab6:	e012      	b.n	8000ade <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff73 	bl	80009ac <SSD1306_Putc>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d002      	beq.n	8000ad8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	e008      	b.n	8000aea <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1e8      	bne.n	8000ab8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fecc 	bl	8000894 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000afc:	f7ff fe9c 	bl	8000838 <SSD1306_UpdateScreen>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <ssd1306_I2C_Init+0x24>)
 8000b0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b0e:	e002      	b.n	8000b16 <ssd1306_I2C_Init+0x12>
		p--;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f9      	bne.n	8000b10 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	0003d090 	.word	0x0003d090

08000b2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b0c7      	sub	sp, #284	@ 0x11c
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4604      	mov	r4, r0
 8000b34:	4608      	mov	r0, r1
 8000b36:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000b3a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000b3e:	600a      	str	r2, [r1, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b46:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b52:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000b56:	4602      	mov	r2, r0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b62:	460a      	mov	r2, r1
 8000b64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b6e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b72:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000b80:	e015      	b.n	8000bae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b8a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000b8e:	6812      	ldr	r2, [r2, #0]
 8000b90:	441a      	add	r2, r3
 8000b92:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b96:	3301      	adds	r3, #1
 8000b98:	7811      	ldrb	r1, [r2, #0]
 8000b9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b9e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000ba2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ba4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ba8:	3301      	adds	r3, #1
 8000baa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000bae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bb8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d8df      	bhi.n	8000b82 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000bc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bc6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	200a      	movs	r0, #10
 8000be2:	9000      	str	r0, [sp, #0]
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000be6:	f000 fded 	bl	80017c4 <HAL_I2C_Master_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	20000080 	.word	0x20000080

08000bf8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	460b      	mov	r3, r1
 8000c04:	71bb      	strb	r3, [r7, #6]
 8000c06:	4613      	mov	r3, r2
 8000c08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c0e:	797b      	ldrb	r3, [r7, #5]
 8000c10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	b299      	uxth	r1, r3
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <ssd1306_I2C_Write+0x38>)
 8000c22:	f000 fdcf 	bl	80017c4 <HAL_I2C_Master_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000080 	.word	0x20000080

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000

08000c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_I2C_MspInit+0x70>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d123      	bne.n	8000d00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd0:	23c0      	movs	r3, #192	@ 0xc0
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd4:	2312      	movs	r3, #18
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <HAL_I2C_MspInit+0x78>)
 8000ce4:	f000 fa76 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_I2C_MspInit+0x74>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d24:	d10b      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <HAL_UART_MspInit+0x8c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d131      	bne.n	8000dd0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1a      	ldr	r2, [pc, #104]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_UART_MspInit+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <HAL_UART_MspInit+0x94>)
 8000db2:	f000 fa0f 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_UART_MspInit+0x94>)
 8000dcc:	f000 fa02 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f8aa 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f002 f992 	bl	8003194 <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20005000 	.word	0x20005000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	20000570 	.word	0x20000570
 8000ea4:	200006c0 	.word	0x200006c0

08000ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb4:	f7ff fff8 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eba:	490c      	ldr	r1, [pc, #48]	@ (8000eec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ed0:	4c09      	ldr	r4, [pc, #36]	@ (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f002 f95f 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee2:	f7ff fa0d 	bl	8000300 <main>
  bx lr
 8000ee6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ef0:	080048a4 	.word	0x080048a4
  ldr r2, =_sbss
 8000ef4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ef8:	200006c0 	.word	0x200006c0

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_Init+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <HAL_Init+0x28>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f92b 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe8a 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f935 	bl	80011ba <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f90b 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000010 	.word	0x20000010
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <HAL_IncTick+0x20>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000010 	.word	0x20000010
 8000fac:	20000574 	.word	0x20000574

08000fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	@ (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000574 	.word	0x20000574

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffe0 	bl	8000fb0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000010 	.word	0x20000010

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	@ (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	@ (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff49 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e169      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8158 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a9a      	ldr	r2, [pc, #616]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d05e      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001210:	4a98      	ldr	r2, [pc, #608]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d875      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001216:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d058      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 800121c:	4a96      	ldr	r2, [pc, #600]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d86f      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001222:	4a96      	ldr	r2, [pc, #600]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d052      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001228:	4a94      	ldr	r2, [pc, #592]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d869      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800122e:	4a94      	ldr	r2, [pc, #592]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04c      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001234:	4a92      	ldr	r2, [pc, #584]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d863      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800123a:	4a92      	ldr	r2, [pc, #584]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d046      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001240:	4a90      	ldr	r2, [pc, #576]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d85d      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d82a      	bhi.n	80012a0 <HAL_GPIO_Init+0xcc>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d859      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_GPIO_Init+0x80>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012bb 	.word	0x080012bb
 8001260:	080012fd 	.word	0x080012fd
 8001264:	08001303 	.word	0x08001303
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	08001303 	.word	0x08001303
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	4a79      	ldr	r2, [pc, #484]	@ (8001488 <HAL_GPIO_Init+0x2b4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e029      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e024      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01f      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e01a      	b.n	8001304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e013      	b.n	8001304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e009      	b.n	8001304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x130>
          break;
 8001302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d801      	bhi.n	800130e <HAL_GPIO_Init+0x13a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_Init+0x13e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d802      	bhi.n	8001320 <HAL_GPIO_Init+0x14c>
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x152>
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	3b08      	subs	r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	210f      	movs	r1, #15
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80b1 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136c:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HAL_GPIO_Init+0x2c0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_GPIO_Init+0x2c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	@ (800149c <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	@ (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1e0>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d2:	492f      	ldr	r1, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	492c      	ldr	r1, [pc, #176]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	4928      	ldr	r1, [pc, #160]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	491e      	ldr	r1, [pc, #120]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4914      	ldr	r1, [pc, #80]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d021      	beq.n	80014a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x2e2>
 8001472:	bf00      	nop
 8001474:	10320000 	.word	0x10320000
 8001478:	10310000 	.word	0x10310000
 800147c:	10220000 	.word	0x10220000
 8001480:	10210000 	.word	0x10210000
 8001484:	10120000 	.word	0x10120000
 8001488:	10110000 	.word	0x10110000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae8e 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	372c      	adds	r7, #44	@ 0x2c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151a:	787b      	ldrb	r3, [r7, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001526:	e003      	b.n	8001530 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	611a      	str	r2, [r3, #16]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e12b      	b.n	80017a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fb98 	bl	8000c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800158e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800159e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a0:	f001 f960 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a81      	ldr	r2, [pc, #516]	@ (80017b0 <HAL_I2C_Init+0x274>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d807      	bhi.n	80015c0 <HAL_I2C_Init+0x84>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4a80      	ldr	r2, [pc, #512]	@ (80017b4 <HAL_I2C_Init+0x278>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bf94      	ite	ls
 80015b8:	2301      	movls	r3, #1
 80015ba:	2300      	movhi	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	e006      	b.n	80015ce <HAL_I2C_Init+0x92>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a7d      	ldr	r2, [pc, #500]	@ (80017b8 <HAL_I2C_Init+0x27c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0e7      	b.n	80017a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a78      	ldr	r2, [pc, #480]	@ (80017bc <HAL_I2C_Init+0x280>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a6a      	ldr	r2, [pc, #424]	@ (80017b0 <HAL_I2C_Init+0x274>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d802      	bhi.n	8001610 <HAL_I2C_Init+0xd4>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	e009      	b.n	8001624 <HAL_I2C_Init+0xe8>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a69      	ldr	r2, [pc, #420]	@ (80017c0 <HAL_I2C_Init+0x284>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001636:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	495c      	ldr	r1, [pc, #368]	@ (80017b0 <HAL_I2C_Init+0x274>)
 8001640:	428b      	cmp	r3, r1
 8001642:	d819      	bhi.n	8001678 <HAL_I2C_Init+0x13c>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e59      	subs	r1, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001652:	1c59      	adds	r1, r3, #1
 8001654:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001658:	400b      	ands	r3, r1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_I2C_Init+0x138>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e59      	subs	r1, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fbb1 f3f3 	udiv	r3, r1, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	e051      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 8001674:	2304      	movs	r3, #4
 8001676:	e04f      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d111      	bne.n	80016a4 <HAL_I2C_Init+0x168>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e58      	subs	r0, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	e012      	b.n	80016ca <HAL_I2C_Init+0x18e>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	0099      	lsls	r1, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x196>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e022      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10e      	bne.n	80016f8 <HAL_I2C_Init+0x1bc>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e58      	subs	r0, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6859      	ldr	r1, [r3, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f6:	e00f      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	0099      	lsls	r1, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	fbb0 f3f3 	udiv	r3, r0, r3
 800170e:	3301      	adds	r3, #1
 8001710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	6809      	ldr	r1, [r1, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001746:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6911      	ldr	r1, [r2, #16]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68d2      	ldr	r2, [r2, #12]
 8001752:	4311      	orrs	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	430b      	orrs	r3, r1
 800175a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2220      	movs	r2, #32
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	000186a0 	.word	0x000186a0
 80017b4:	001e847f 	.word	0x001e847f
 80017b8:	003d08ff 	.word	0x003d08ff
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	10624dd3 	.word	0x10624dd3

080017c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
 80017d4:	4613      	mov	r3, r2
 80017d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff fbea 	bl	8000fb0 <HAL_GetTick>
 80017dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	f040 80e0 	bne.w	80019ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2319      	movs	r3, #25
 80017f2:	2201      	movs	r2, #1
 80017f4:	4970      	ldr	r1, [pc, #448]	@ (80019b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fa92 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	e0d3      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x50>
 8001810:	2302      	movs	r3, #2
 8001812:	e0cc      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d007      	beq.n	800183a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2221      	movs	r2, #33	@ 0x21
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2210      	movs	r2, #16
 8001856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	893a      	ldrh	r2, [r7, #8]
 800186a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a50      	ldr	r2, [pc, #320]	@ (80019bc <HAL_I2C_Master_Transmit+0x1f8>)
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800187c:	8979      	ldrh	r1, [r7, #10]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f9ca 	bl	8001c1c <I2C_MasterRequestWrite>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e08d      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018a8:	e066      	b.n	8001978 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fb50 	bl	8001f54 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00d      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d107      	bne.n	80018d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b04      	cmp	r3, #4
 8001912:	d11b      	bne.n	800194c <HAL_I2C_Master_Transmit+0x188>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d017      	beq.n	800194c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6a39      	ldr	r1, [r7, #32]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fb47 	bl	8001fe4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001972:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e01a      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d194      	bne.n	80018aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e000      	b.n	80019ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019ac:	2302      	movs	r3, #2
  }
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	00100002 	.word	0x00100002
 80019bc:	ffff0000 	.word	0xffff0000

080019c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff faee 	bl	8000fb0 <HAL_GetTick>
 80019d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	f040 8111 	bne.w	8001c0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2319      	movs	r3, #25
 80019ee:	2201      	movs	r2, #1
 80019f0:	4988      	ldr	r1, [pc, #544]	@ (8001c14 <HAL_I2C_IsDeviceReady+0x254>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f994 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e104      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2C_IsDeviceReady+0x50>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0fd      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d007      	beq.n	8001a36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2224      	movs	r2, #36	@ 0x24
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a70      	ldr	r2, [pc, #448]	@ (8001c18 <HAL_I2C_IsDeviceReady+0x258>)
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f952 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a90:	d103      	bne.n	8001a9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0b6      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001aac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fa7f 	bl	8000fb0 <HAL_GetTick>
 8001ab2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ae2:	e025      	b.n	8001b30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ae4:	f7ff fa64 	bl	8000fb0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d302      	bcc.n	8001afa <HAL_I2C_IsDeviceReady+0x13a>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	22a0      	movs	r2, #160	@ 0xa0
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b3a:	d005      	beq.n	8001b48 <HAL_I2C_IsDeviceReady+0x188>
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_I2C_IsDeviceReady+0x188>
 8001b42:	7dbb      	ldrb	r3, [r7, #22]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0cd      	beq.n	8001ae4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d129      	bne.n	8001bb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2319      	movs	r3, #25
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4921      	ldr	r1, [pc, #132]	@ (8001c14 <HAL_I2C_IsDeviceReady+0x254>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f8c6 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e036      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e02c      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2319      	movs	r3, #25
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	490f      	ldr	r1, [pc, #60]	@ (8001c14 <HAL_I2C_IsDeviceReady+0x254>)
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f8a2 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e012      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f4ff af32 	bcc.w	8001a5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	00100002 	.word	0x00100002
 8001c18:	ffff0000 	.word	0xffff0000

08001c1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d006      	beq.n	8001c46 <I2C_MasterRequestWrite+0x2a>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d003      	beq.n	8001c46 <I2C_MasterRequestWrite+0x2a>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c44:	d108      	bne.n	8001c58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e00b      	b.n	8001c70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d107      	bne.n	8001c70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f84f 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c96:	d103      	bne.n	8001ca0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e035      	b.n	8001d10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cac:	d108      	bne.n	8001cc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	e01b      	b.n	8001cf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	11db      	asrs	r3, r3, #7
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 0306 	and.w	r3, r3, #6
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f063 030f 	orn	r3, r3, #15
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	490e      	ldr	r1, [pc, #56]	@ (8001d18 <I2C_MasterRequestWrite+0xfc>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f898 	bl	8001e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e010      	b.n	8001d10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4907      	ldr	r1, [pc, #28]	@ (8001d1c <I2C_MasterRequestWrite+0x100>)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f888 	bl	8001e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	00010008 	.word	0x00010008
 8001d1c:	00010002 	.word	0x00010002

08001d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d30:	e048      	b.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d044      	beq.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3a:	f7ff f939 	bl	8000fb0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d302      	bcc.n	8001d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d139      	bne.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10d      	bne.n	8001d76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4013      	ands	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	e00c      	b.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4013      	ands	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d116      	bne.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e023      	b.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10d      	bne.n	8001dea <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	e00c      	b.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4013      	ands	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d093      	beq.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e22:	e071      	b.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e32:	d123      	bne.n	8001e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e067      	b.n	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	d041      	beq.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e84:	f7ff f894 	bl	8000fb0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d302      	bcc.n	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d136      	bne.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10c      	bne.n	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	e00b      	b.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e021      	b.n	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	0c1b      	lsrs	r3, r3, #16
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10c      	bne.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e00b      	b.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f af6d 	bne.w	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f60:	e034      	b.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f886 	bl	8002074 <I2C_IsAcknowledgeFailed>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e034      	b.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d028      	beq.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff f819 	bl	8000fb0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11d      	bne.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	2b80      	cmp	r3, #128	@ 0x80
 8001f9c:	d016      	beq.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e007      	b.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd6:	2b80      	cmp	r3, #128	@ 0x80
 8001fd8:	d1c3      	bne.n	8001f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff0:	e034      	b.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f83e 	bl	8002074 <I2C_IsAcknowledgeFailed>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e034      	b.n	800206c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d028      	beq.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe ffd1 	bl	8000fb0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11d      	bne.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d016      	beq.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e007      	b.n	800206c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b04      	cmp	r3, #4
 8002068:	d1c3      	bne.n	8001ff2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208a:	d11b      	bne.n	80020c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002094:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e272      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e24c      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff00 	bl	8000fb0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fefc 	bl	8000fb0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e200      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe feec 	bl	8000fb0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fee8 	bl	8000fb0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	@ 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1ec      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fea1 	bl	8000fb0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fe9d 	bl	8000fb0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe80 	bl	8000fb0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fe7c 	bl	8000fb0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e180      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7fe fe60 	bl	8000fb0 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7fe fe5c 	bl	8000fb0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e160      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 face 	bl	80028b4 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fe46 	bl	8000fb0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fe42 	bl	8000fb0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e146      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a87      	ldr	r2, [pc, #540]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b85      	ldr	r3, [pc, #532]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b82      	ldr	r3, [pc, #520]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7e      	ldr	r2, [pc, #504]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fe03 	bl	8000fb0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fdff 	bl	8000fb0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e103      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a5a      	ldr	r2, [pc, #360]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe fdb3 	bl	8000fb0 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fdaf 	bl	8000fb0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fe fd9d 	bl	8000fb0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fd99 	bl	8000fb0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fd6d 	bl	8000fb0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fd69 	bl	8000fb0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e06d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4921      	ldr	r1, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fd3d 	bl	8000fb0 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fd39 	bl	8000fb0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e035      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fd26 	bl	8000fb0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fd22 	bl	8000fb0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e026      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e019      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_OscConfig+0x500>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4965      	ldr	r1, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fc74 	bl	8000fb0 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fc70 	bl	8000fb0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4922      	ldr	r1, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fbd2 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	0800483c 	.word	0x0800483c
 80027a0:	20000008 	.word	0x20000008
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x30>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x36>
 80027d6:	e027      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	e027      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0c5b      	lsrs	r3, r3, #17
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <HAL_RCC_GetSysClockFreq+0xa4>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	693b      	ldr	r3, [r7, #16]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	08004854 	.word	0x08004854
 8002848:	08004864 	.word	0x08004864
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000008 	.word	0x20000008

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff2 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	0800484c 	.word	0x0800484c

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffde 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	0800484c 	.word	0x0800484c

080028b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <RCC_Delay+0x34>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <RCC_Delay+0x38>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0a5b      	lsrs	r3, r3, #9
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d0:	bf00      	nop
  }
  while (Delay --);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	60fa      	str	r2, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <RCC_Delay+0x1c>
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	20000008 	.word	0x20000008
 80028ec:	10624dd3 	.word	0x10624dd3

080028f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e041      	b.n	8002986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe f9fc 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 f936 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_ConfigClockSource+0x1c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0b4      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x186>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e2:	d03e      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xd4>
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e8:	f200 8087 	bhi.w	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f0:	f000 8086 	beq.w	8002b00 <HAL_TIM_ConfigClockSource+0x172>
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f8:	d87f      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 80029fa:	2b70      	cmp	r3, #112	@ 0x70
 80029fc:	d01a      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0xa6>
 80029fe:	2b70      	cmp	r3, #112	@ 0x70
 8002a00:	d87b      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a02:	2b60      	cmp	r3, #96	@ 0x60
 8002a04:	d050      	beq.n	8002aa8 <HAL_TIM_ConfigClockSource+0x11a>
 8002a06:	2b60      	cmp	r3, #96	@ 0x60
 8002a08:	d877      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a0a:	2b50      	cmp	r3, #80	@ 0x50
 8002a0c:	d03c      	beq.n	8002a88 <HAL_TIM_ConfigClockSource+0xfa>
 8002a0e:	2b50      	cmp	r3, #80	@ 0x50
 8002a10:	d873      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a12:	2b40      	cmp	r3, #64	@ 0x40
 8002a14:	d058      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0x13a>
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d86f      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a1a:	2b30      	cmp	r3, #48	@ 0x30
 8002a1c:	d064      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x15a>
 8002a1e:	2b30      	cmp	r3, #48	@ 0x30
 8002a20:	d86b      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d060      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x15a>
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d867      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x15a>
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d05a      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x15a>
 8002a32:	e062      	b.n	8002afa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	f000 fa22 	bl	8002e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
      break;
 8002a60:	e04f      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a72:	f000 fa0b 	bl	8002e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a84:	609a      	str	r2, [r3, #8]
      break;
 8002a86:	e03c      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a94:	461a      	mov	r2, r3
 8002a96:	f000 f982 	bl	8002d9e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2150      	movs	r1, #80	@ 0x50
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f9d9 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e02c      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f000 f9a0 	bl	8002dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2160      	movs	r1, #96	@ 0x60
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f9c9 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002ac6:	e01c      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 f962 	bl	8002d9e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2140      	movs	r1, #64	@ 0x40
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f9b9 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e00c      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 f9b0 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002af8:	e003      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      break;
 8002afe:	e000      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e031      	b.n	8002b98 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f898 	bl	8002c7c <TIM_SlaveTimer_SetConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e018      	b.n	8002b98 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b74:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b84:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c70 <TIM_Base_SetConfig+0xd0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c74 <TIM_Base_SetConfig+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a2b      	ldr	r2, [pc, #172]	@ (8002c78 <TIM_Base_SetConfig+0xd8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <TIM_Base_SetConfig+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <TIM_Base_SetConfig+0xd4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <TIM_Base_SetConfig+0xd8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <TIM_Base_SetConfig+0xd0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f023 0201 	bic.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
  }
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800

08002c7c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c98:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b70      	cmp	r3, #112	@ 0x70
 8002cc4:	d01a      	beq.n	8002cfc <TIM_SlaveTimer_SetConfig+0x80>
 8002cc6:	2b70      	cmp	r3, #112	@ 0x70
 8002cc8:	d860      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002cca:	2b60      	cmp	r3, #96	@ 0x60
 8002ccc:	d054      	beq.n	8002d78 <TIM_SlaveTimer_SetConfig+0xfc>
 8002cce:	2b60      	cmp	r3, #96	@ 0x60
 8002cd0:	d85c      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002cd2:	2b50      	cmp	r3, #80	@ 0x50
 8002cd4:	d046      	beq.n	8002d64 <TIM_SlaveTimer_SetConfig+0xe8>
 8002cd6:	2b50      	cmp	r3, #80	@ 0x50
 8002cd8:	d858      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d019      	beq.n	8002d12 <TIM_SlaveTimer_SetConfig+0x96>
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	d854      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002ce2:	2b30      	cmp	r3, #48	@ 0x30
 8002ce4:	d055      	beq.n	8002d92 <TIM_SlaveTimer_SetConfig+0x116>
 8002ce6:	2b30      	cmp	r3, #48	@ 0x30
 8002ce8:	d850      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d051      	beq.n	8002d92 <TIM_SlaveTimer_SetConfig+0x116>
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d84c      	bhi.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04d      	beq.n	8002d92 <TIM_SlaveTimer_SetConfig+0x116>
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d04b      	beq.n	8002d92 <TIM_SlaveTimer_SetConfig+0x116>
 8002cfa:	e047      	b.n	8002d8c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	f000 f8be 	bl	8002e8c <TIM_ETR_SetConfig>
      break;
 8002d10:	e040      	b.n	8002d94 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d101      	bne.n	8002d1e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e03b      	b.n	8002d96 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d44:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
      break;
 8002d62:	e017      	b.n	8002d94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d70:	461a      	mov	r2, r3
 8002d72:	f000 f814 	bl	8002d9e <TIM_TI1_ConfigInputStage>
      break;
 8002d76:	e00d      	b.n	8002d94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d84:	461a      	mov	r2, r3
 8002d86:	f000 f838 	bl	8002dfa <TIM_TI2_ConfigInputStage>
      break;
 8002d8a:	e003      	b.n	8002d94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d90:	e000      	b.n	8002d94 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002d92:	bf00      	nop
  }

  return status;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f023 0201 	bic.w	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 030a 	bic.w	r3, r3, #10
 8002dda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	621a      	str	r2, [r3, #32]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f043 0307 	orr.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	609a      	str	r2, [r3, #8]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e046      	b.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f30:	d009      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800

08002f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e042      	b.n	8003020 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fecc 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f82b 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003062:	f023 030c 	bic.w	r3, r3, #12
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	430b      	orrs	r3, r1
 800306e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	@ (800313c <UART_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d103      	bne.n	8003098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fbfc 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	e002      	b.n	800309e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff fbe4 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	0119      	lsls	r1, r3, #4
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <UART_SetConfig+0x118>)
 80030d6:	fba3 0302 	umull	r0, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2064      	movs	r0, #100	@ 0x64
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	@ 0x32
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <UART_SetConfig+0x118>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	4419      	add	r1, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <UART_SetConfig+0x118>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	@ 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	@ 0x32
 8003120:	4a07      	ldr	r2, [pc, #28]	@ (8003140 <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	440a      	add	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40013800 	.word	0x40013800
 8003140:	51eb851f 	.word	0x51eb851f

08003144 <siprintf>:
 8003144:	b40e      	push	{r1, r2, r3}
 8003146:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800314a:	b500      	push	{lr}
 800314c:	b09c      	sub	sp, #112	@ 0x70
 800314e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003150:	9002      	str	r0, [sp, #8]
 8003152:	9006      	str	r0, [sp, #24]
 8003154:	9107      	str	r1, [sp, #28]
 8003156:	9104      	str	r1, [sp, #16]
 8003158:	4808      	ldr	r0, [pc, #32]	@ (800317c <siprintf+0x38>)
 800315a:	4909      	ldr	r1, [pc, #36]	@ (8003180 <siprintf+0x3c>)
 800315c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003160:	9105      	str	r1, [sp, #20]
 8003162:	6800      	ldr	r0, [r0, #0]
 8003164:	a902      	add	r1, sp, #8
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f000 f992 	bl	8003490 <_svfiprintf_r>
 800316c:	2200      	movs	r2, #0
 800316e:	9b02      	ldr	r3, [sp, #8]
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	b01c      	add	sp, #112	@ 0x70
 8003174:	f85d eb04 	ldr.w	lr, [sp], #4
 8003178:	b003      	add	sp, #12
 800317a:	4770      	bx	lr
 800317c:	20000014 	.word	0x20000014
 8003180:	ffff0208 	.word	0xffff0208

08003184 <memset>:
 8003184:	4603      	mov	r3, r0
 8003186:	4402      	add	r2, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	f803 1b01 	strb.w	r1, [r3], #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	@ (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000014 	.word	0x20000014

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2600      	movs	r6, #0
 80031a4:	4d0c      	ldr	r5, [pc, #48]	@ (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	@ (80031dc <__libc_init_array+0x3c>)
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f000 fc78 	bl	8003aa4 <_init>
 80031b4:	2600      	movs	r6, #0
 80031b6:	4d0a      	ldr	r5, [pc, #40]	@ (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	@ (80031e4 <__libc_init_array+0x44>)
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	0800489c 	.word	0x0800489c
 80031dc:	0800489c 	.word	0x0800489c
 80031e0:	0800489c 	.word	0x0800489c
 80031e4:	080048a0 	.word	0x080048a0

080031e8 <__retarget_lock_acquire_recursive>:
 80031e8:	4770      	bx	lr

080031ea <__retarget_lock_release_recursive>:
 80031ea:	4770      	bx	lr

080031ec <_free_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4605      	mov	r5, r0
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d040      	beq.n	8003276 <_free_r+0x8a>
 80031f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f8:	1f0c      	subs	r4, r1, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bfb8      	it	lt
 80031fe:	18e4      	addlt	r4, r4, r3
 8003200:	f000 f8de 	bl	80033c0 <__malloc_lock>
 8003204:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <_free_r+0x8c>)
 8003206:	6813      	ldr	r3, [r2, #0]
 8003208:	b933      	cbnz	r3, 8003218 <_free_r+0x2c>
 800320a:	6063      	str	r3, [r4, #4]
 800320c:	6014      	str	r4, [r2, #0]
 800320e:	4628      	mov	r0, r5
 8003210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003214:	f000 b8da 	b.w	80033cc <__malloc_unlock>
 8003218:	42a3      	cmp	r3, r4
 800321a:	d908      	bls.n	800322e <_free_r+0x42>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	1821      	adds	r1, r4, r0
 8003220:	428b      	cmp	r3, r1
 8003222:	bf01      	itttt	eq
 8003224:	6819      	ldreq	r1, [r3, #0]
 8003226:	685b      	ldreq	r3, [r3, #4]
 8003228:	1809      	addeq	r1, r1, r0
 800322a:	6021      	streq	r1, [r4, #0]
 800322c:	e7ed      	b.n	800320a <_free_r+0x1e>
 800322e:	461a      	mov	r2, r3
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b10b      	cbz	r3, 8003238 <_free_r+0x4c>
 8003234:	42a3      	cmp	r3, r4
 8003236:	d9fa      	bls.n	800322e <_free_r+0x42>
 8003238:	6811      	ldr	r1, [r2, #0]
 800323a:	1850      	adds	r0, r2, r1
 800323c:	42a0      	cmp	r0, r4
 800323e:	d10b      	bne.n	8003258 <_free_r+0x6c>
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	4401      	add	r1, r0
 8003244:	1850      	adds	r0, r2, r1
 8003246:	4283      	cmp	r3, r0
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	d1e0      	bne.n	800320e <_free_r+0x22>
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4408      	add	r0, r1
 8003252:	6010      	str	r0, [r2, #0]
 8003254:	6053      	str	r3, [r2, #4]
 8003256:	e7da      	b.n	800320e <_free_r+0x22>
 8003258:	d902      	bls.n	8003260 <_free_r+0x74>
 800325a:	230c      	movs	r3, #12
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	e7d6      	b.n	800320e <_free_r+0x22>
 8003260:	6820      	ldr	r0, [r4, #0]
 8003262:	1821      	adds	r1, r4, r0
 8003264:	428b      	cmp	r3, r1
 8003266:	bf01      	itttt	eq
 8003268:	6819      	ldreq	r1, [r3, #0]
 800326a:	685b      	ldreq	r3, [r3, #4]
 800326c:	1809      	addeq	r1, r1, r0
 800326e:	6021      	streq	r1, [r4, #0]
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	6054      	str	r4, [r2, #4]
 8003274:	e7cb      	b.n	800320e <_free_r+0x22>
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	200006bc 	.word	0x200006bc

0800327c <sbrk_aligned>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	4e0f      	ldr	r6, [pc, #60]	@ (80032bc <sbrk_aligned+0x40>)
 8003280:	460c      	mov	r4, r1
 8003282:	6831      	ldr	r1, [r6, #0]
 8003284:	4605      	mov	r5, r0
 8003286:	b911      	cbnz	r1, 800328e <sbrk_aligned+0x12>
 8003288:	f000 fbaa 	bl	80039e0 <_sbrk_r>
 800328c:	6030      	str	r0, [r6, #0]
 800328e:	4621      	mov	r1, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 fba5 	bl	80039e0 <_sbrk_r>
 8003296:	1c43      	adds	r3, r0, #1
 8003298:	d103      	bne.n	80032a2 <sbrk_aligned+0x26>
 800329a:	f04f 34ff 	mov.w	r4, #4294967295
 800329e:	4620      	mov	r0, r4
 80032a0:	bd70      	pop	{r4, r5, r6, pc}
 80032a2:	1cc4      	adds	r4, r0, #3
 80032a4:	f024 0403 	bic.w	r4, r4, #3
 80032a8:	42a0      	cmp	r0, r4
 80032aa:	d0f8      	beq.n	800329e <sbrk_aligned+0x22>
 80032ac:	1a21      	subs	r1, r4, r0
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 fb96 	bl	80039e0 <_sbrk_r>
 80032b4:	3001      	adds	r0, #1
 80032b6:	d1f2      	bne.n	800329e <sbrk_aligned+0x22>
 80032b8:	e7ef      	b.n	800329a <sbrk_aligned+0x1e>
 80032ba:	bf00      	nop
 80032bc:	200006b8 	.word	0x200006b8

080032c0 <_malloc_r>:
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c4:	1ccd      	adds	r5, r1, #3
 80032c6:	f025 0503 	bic.w	r5, r5, #3
 80032ca:	3508      	adds	r5, #8
 80032cc:	2d0c      	cmp	r5, #12
 80032ce:	bf38      	it	cc
 80032d0:	250c      	movcc	r5, #12
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	4606      	mov	r6, r0
 80032d6:	db01      	blt.n	80032dc <_malloc_r+0x1c>
 80032d8:	42a9      	cmp	r1, r5
 80032da:	d904      	bls.n	80032e6 <_malloc_r+0x26>
 80032dc:	230c      	movs	r3, #12
 80032de:	6033      	str	r3, [r6, #0]
 80032e0:	2000      	movs	r0, #0
 80032e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033bc <_malloc_r+0xfc>
 80032ea:	f000 f869 	bl	80033c0 <__malloc_lock>
 80032ee:	f8d8 3000 	ldr.w	r3, [r8]
 80032f2:	461c      	mov	r4, r3
 80032f4:	bb44      	cbnz	r4, 8003348 <_malloc_r+0x88>
 80032f6:	4629      	mov	r1, r5
 80032f8:	4630      	mov	r0, r6
 80032fa:	f7ff ffbf 	bl	800327c <sbrk_aligned>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	4604      	mov	r4, r0
 8003302:	d158      	bne.n	80033b6 <_malloc_r+0xf6>
 8003304:	f8d8 4000 	ldr.w	r4, [r8]
 8003308:	4627      	mov	r7, r4
 800330a:	2f00      	cmp	r7, #0
 800330c:	d143      	bne.n	8003396 <_malloc_r+0xd6>
 800330e:	2c00      	cmp	r4, #0
 8003310:	d04b      	beq.n	80033aa <_malloc_r+0xea>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	4639      	mov	r1, r7
 8003316:	4630      	mov	r0, r6
 8003318:	eb04 0903 	add.w	r9, r4, r3
 800331c:	f000 fb60 	bl	80039e0 <_sbrk_r>
 8003320:	4581      	cmp	r9, r0
 8003322:	d142      	bne.n	80033aa <_malloc_r+0xea>
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	4630      	mov	r0, r6
 8003328:	1a6d      	subs	r5, r5, r1
 800332a:	4629      	mov	r1, r5
 800332c:	f7ff ffa6 	bl	800327c <sbrk_aligned>
 8003330:	3001      	adds	r0, #1
 8003332:	d03a      	beq.n	80033aa <_malloc_r+0xea>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	442b      	add	r3, r5
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	f8d8 3000 	ldr.w	r3, [r8]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	bb62      	cbnz	r2, 800339c <_malloc_r+0xdc>
 8003342:	f8c8 7000 	str.w	r7, [r8]
 8003346:	e00f      	b.n	8003368 <_malloc_r+0xa8>
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	1b52      	subs	r2, r2, r5
 800334c:	d420      	bmi.n	8003390 <_malloc_r+0xd0>
 800334e:	2a0b      	cmp	r2, #11
 8003350:	d917      	bls.n	8003382 <_malloc_r+0xc2>
 8003352:	1961      	adds	r1, r4, r5
 8003354:	42a3      	cmp	r3, r4
 8003356:	6025      	str	r5, [r4, #0]
 8003358:	bf18      	it	ne
 800335a:	6059      	strne	r1, [r3, #4]
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	bf08      	it	eq
 8003360:	f8c8 1000 	streq.w	r1, [r8]
 8003364:	5162      	str	r2, [r4, r5]
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	4630      	mov	r0, r6
 800336a:	f000 f82f 	bl	80033cc <__malloc_unlock>
 800336e:	f104 000b 	add.w	r0, r4, #11
 8003372:	1d23      	adds	r3, r4, #4
 8003374:	f020 0007 	bic.w	r0, r0, #7
 8003378:	1ac2      	subs	r2, r0, r3
 800337a:	bf1c      	itt	ne
 800337c:	1a1b      	subne	r3, r3, r0
 800337e:	50a3      	strne	r3, [r4, r2]
 8003380:	e7af      	b.n	80032e2 <_malloc_r+0x22>
 8003382:	6862      	ldr	r2, [r4, #4]
 8003384:	42a3      	cmp	r3, r4
 8003386:	bf0c      	ite	eq
 8003388:	f8c8 2000 	streq.w	r2, [r8]
 800338c:	605a      	strne	r2, [r3, #4]
 800338e:	e7eb      	b.n	8003368 <_malloc_r+0xa8>
 8003390:	4623      	mov	r3, r4
 8003392:	6864      	ldr	r4, [r4, #4]
 8003394:	e7ae      	b.n	80032f4 <_malloc_r+0x34>
 8003396:	463c      	mov	r4, r7
 8003398:	687f      	ldr	r7, [r7, #4]
 800339a:	e7b6      	b.n	800330a <_malloc_r+0x4a>
 800339c:	461a      	mov	r2, r3
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	d1fb      	bne.n	800339c <_malloc_r+0xdc>
 80033a4:	2300      	movs	r3, #0
 80033a6:	6053      	str	r3, [r2, #4]
 80033a8:	e7de      	b.n	8003368 <_malloc_r+0xa8>
 80033aa:	230c      	movs	r3, #12
 80033ac:	4630      	mov	r0, r6
 80033ae:	6033      	str	r3, [r6, #0]
 80033b0:	f000 f80c 	bl	80033cc <__malloc_unlock>
 80033b4:	e794      	b.n	80032e0 <_malloc_r+0x20>
 80033b6:	6005      	str	r5, [r0, #0]
 80033b8:	e7d6      	b.n	8003368 <_malloc_r+0xa8>
 80033ba:	bf00      	nop
 80033bc:	200006bc 	.word	0x200006bc

080033c0 <__malloc_lock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	@ (80033c8 <__malloc_lock+0x8>)
 80033c2:	f7ff bf11 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	200006b4 	.word	0x200006b4

080033cc <__malloc_unlock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	@ (80033d4 <__malloc_unlock+0x8>)
 80033ce:	f7ff bf0c 	b.w	80031ea <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	200006b4 	.word	0x200006b4

080033d8 <__ssputs_r>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	461f      	mov	r7, r3
 80033de:	688e      	ldr	r6, [r1, #8]
 80033e0:	4682      	mov	sl, r0
 80033e2:	42be      	cmp	r6, r7
 80033e4:	460c      	mov	r4, r1
 80033e6:	4690      	mov	r8, r2
 80033e8:	680b      	ldr	r3, [r1, #0]
 80033ea:	d82d      	bhi.n	8003448 <__ssputs_r+0x70>
 80033ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033f4:	d026      	beq.n	8003444 <__ssputs_r+0x6c>
 80033f6:	6965      	ldr	r5, [r4, #20]
 80033f8:	6909      	ldr	r1, [r1, #16]
 80033fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033fe:	eba3 0901 	sub.w	r9, r3, r1
 8003402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003406:	1c7b      	adds	r3, r7, #1
 8003408:	444b      	add	r3, r9
 800340a:	106d      	asrs	r5, r5, #1
 800340c:	429d      	cmp	r5, r3
 800340e:	bf38      	it	cc
 8003410:	461d      	movcc	r5, r3
 8003412:	0553      	lsls	r3, r2, #21
 8003414:	d527      	bpl.n	8003466 <__ssputs_r+0x8e>
 8003416:	4629      	mov	r1, r5
 8003418:	f7ff ff52 	bl	80032c0 <_malloc_r>
 800341c:	4606      	mov	r6, r0
 800341e:	b360      	cbz	r0, 800347a <__ssputs_r+0xa2>
 8003420:	464a      	mov	r2, r9
 8003422:	6921      	ldr	r1, [r4, #16]
 8003424:	f000 fafa 	bl	8003a1c <memcpy>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800342e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	6126      	str	r6, [r4, #16]
 8003436:	444e      	add	r6, r9
 8003438:	6026      	str	r6, [r4, #0]
 800343a:	463e      	mov	r6, r7
 800343c:	6165      	str	r5, [r4, #20]
 800343e:	eba5 0509 	sub.w	r5, r5, r9
 8003442:	60a5      	str	r5, [r4, #8]
 8003444:	42be      	cmp	r6, r7
 8003446:	d900      	bls.n	800344a <__ssputs_r+0x72>
 8003448:	463e      	mov	r6, r7
 800344a:	4632      	mov	r2, r6
 800344c:	4641      	mov	r1, r8
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f000 faac 	bl	80039ac <memmove>
 8003454:	2000      	movs	r0, #0
 8003456:	68a3      	ldr	r3, [r4, #8]
 8003458:	1b9b      	subs	r3, r3, r6
 800345a:	60a3      	str	r3, [r4, #8]
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	4433      	add	r3, r6
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003466:	462a      	mov	r2, r5
 8003468:	f000 fae6 	bl	8003a38 <_realloc_r>
 800346c:	4606      	mov	r6, r0
 800346e:	2800      	cmp	r0, #0
 8003470:	d1e0      	bne.n	8003434 <__ssputs_r+0x5c>
 8003472:	4650      	mov	r0, sl
 8003474:	6921      	ldr	r1, [r4, #16]
 8003476:	f7ff feb9 	bl	80031ec <_free_r>
 800347a:	230c      	movs	r3, #12
 800347c:	f8ca 3000 	str.w	r3, [sl]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f04f 30ff 	mov.w	r0, #4294967295
 8003486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	e7e9      	b.n	8003462 <__ssputs_r+0x8a>
	...

08003490 <_svfiprintf_r>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	4698      	mov	r8, r3
 8003496:	898b      	ldrh	r3, [r1, #12]
 8003498:	4607      	mov	r7, r0
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	460d      	mov	r5, r1
 800349e:	4614      	mov	r4, r2
 80034a0:	b09d      	sub	sp, #116	@ 0x74
 80034a2:	d510      	bpl.n	80034c6 <_svfiprintf_r+0x36>
 80034a4:	690b      	ldr	r3, [r1, #16]
 80034a6:	b973      	cbnz	r3, 80034c6 <_svfiprintf_r+0x36>
 80034a8:	2140      	movs	r1, #64	@ 0x40
 80034aa:	f7ff ff09 	bl	80032c0 <_malloc_r>
 80034ae:	6028      	str	r0, [r5, #0]
 80034b0:	6128      	str	r0, [r5, #16]
 80034b2:	b930      	cbnz	r0, 80034c2 <_svfiprintf_r+0x32>
 80034b4:	230c      	movs	r3, #12
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	b01d      	add	sp, #116	@ 0x74
 80034be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c2:	2340      	movs	r3, #64	@ 0x40
 80034c4:	616b      	str	r3, [r5, #20]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ca:	2320      	movs	r3, #32
 80034cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034d0:	2330      	movs	r3, #48	@ 0x30
 80034d2:	f04f 0901 	mov.w	r9, #1
 80034d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80034da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003674 <_svfiprintf_r+0x1e4>
 80034de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034e2:	4623      	mov	r3, r4
 80034e4:	469a      	mov	sl, r3
 80034e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ea:	b10a      	cbz	r2, 80034f0 <_svfiprintf_r+0x60>
 80034ec:	2a25      	cmp	r2, #37	@ 0x25
 80034ee:	d1f9      	bne.n	80034e4 <_svfiprintf_r+0x54>
 80034f0:	ebba 0b04 	subs.w	fp, sl, r4
 80034f4:	d00b      	beq.n	800350e <_svfiprintf_r+0x7e>
 80034f6:	465b      	mov	r3, fp
 80034f8:	4622      	mov	r2, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	4638      	mov	r0, r7
 80034fe:	f7ff ff6b 	bl	80033d8 <__ssputs_r>
 8003502:	3001      	adds	r0, #1
 8003504:	f000 80a7 	beq.w	8003656 <_svfiprintf_r+0x1c6>
 8003508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800350a:	445a      	add	r2, fp
 800350c:	9209      	str	r2, [sp, #36]	@ 0x24
 800350e:	f89a 3000 	ldrb.w	r3, [sl]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 809f 	beq.w	8003656 <_svfiprintf_r+0x1c6>
 8003518:	2300      	movs	r3, #0
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003522:	f10a 0a01 	add.w	sl, sl, #1
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	9307      	str	r3, [sp, #28]
 800352a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800352e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003530:	4654      	mov	r4, sl
 8003532:	2205      	movs	r2, #5
 8003534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003538:	484e      	ldr	r0, [pc, #312]	@ (8003674 <_svfiprintf_r+0x1e4>)
 800353a:	f000 fa61 	bl	8003a00 <memchr>
 800353e:	9a04      	ldr	r2, [sp, #16]
 8003540:	b9d8      	cbnz	r0, 800357a <_svfiprintf_r+0xea>
 8003542:	06d0      	lsls	r0, r2, #27
 8003544:	bf44      	itt	mi
 8003546:	2320      	movmi	r3, #32
 8003548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800354c:	0711      	lsls	r1, r2, #28
 800354e:	bf44      	itt	mi
 8003550:	232b      	movmi	r3, #43	@ 0x2b
 8003552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003556:	f89a 3000 	ldrb.w	r3, [sl]
 800355a:	2b2a      	cmp	r3, #42	@ 0x2a
 800355c:	d015      	beq.n	800358a <_svfiprintf_r+0xfa>
 800355e:	4654      	mov	r4, sl
 8003560:	2000      	movs	r0, #0
 8003562:	f04f 0c0a 	mov.w	ip, #10
 8003566:	9a07      	ldr	r2, [sp, #28]
 8003568:	4621      	mov	r1, r4
 800356a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356e:	3b30      	subs	r3, #48	@ 0x30
 8003570:	2b09      	cmp	r3, #9
 8003572:	d94b      	bls.n	800360c <_svfiprintf_r+0x17c>
 8003574:	b1b0      	cbz	r0, 80035a4 <_svfiprintf_r+0x114>
 8003576:	9207      	str	r2, [sp, #28]
 8003578:	e014      	b.n	80035a4 <_svfiprintf_r+0x114>
 800357a:	eba0 0308 	sub.w	r3, r0, r8
 800357e:	fa09 f303 	lsl.w	r3, r9, r3
 8003582:	4313      	orrs	r3, r2
 8003584:	46a2      	mov	sl, r4
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	e7d2      	b.n	8003530 <_svfiprintf_r+0xa0>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	1d19      	adds	r1, r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	9103      	str	r1, [sp, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	bfbb      	ittet	lt
 8003596:	425b      	neglt	r3, r3
 8003598:	f042 0202 	orrlt.w	r2, r2, #2
 800359c:	9307      	strge	r3, [sp, #28]
 800359e:	9307      	strlt	r3, [sp, #28]
 80035a0:	bfb8      	it	lt
 80035a2:	9204      	strlt	r2, [sp, #16]
 80035a4:	7823      	ldrb	r3, [r4, #0]
 80035a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80035a8:	d10a      	bne.n	80035c0 <_svfiprintf_r+0x130>
 80035aa:	7863      	ldrb	r3, [r4, #1]
 80035ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ae:	d132      	bne.n	8003616 <_svfiprintf_r+0x186>
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	3402      	adds	r4, #2
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	9203      	str	r2, [sp, #12]
 80035ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035be:	9305      	str	r3, [sp, #20]
 80035c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003678 <_svfiprintf_r+0x1e8>
 80035c4:	2203      	movs	r2, #3
 80035c6:	4650      	mov	r0, sl
 80035c8:	7821      	ldrb	r1, [r4, #0]
 80035ca:	f000 fa19 	bl	8003a00 <memchr>
 80035ce:	b138      	cbz	r0, 80035e0 <_svfiprintf_r+0x150>
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	9b04      	ldr	r3, [sp, #16]
 80035d4:	eba0 000a 	sub.w	r0, r0, sl
 80035d8:	4082      	lsls	r2, r0
 80035da:	4313      	orrs	r3, r2
 80035dc:	3401      	adds	r4, #1
 80035de:	9304      	str	r3, [sp, #16]
 80035e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e4:	2206      	movs	r2, #6
 80035e6:	4825      	ldr	r0, [pc, #148]	@ (800367c <_svfiprintf_r+0x1ec>)
 80035e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035ec:	f000 fa08 	bl	8003a00 <memchr>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d036      	beq.n	8003662 <_svfiprintf_r+0x1d2>
 80035f4:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <_svfiprintf_r+0x1f0>)
 80035f6:	bb1b      	cbnz	r3, 8003640 <_svfiprintf_r+0x1b0>
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	3307      	adds	r3, #7
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	3308      	adds	r3, #8
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003606:	4433      	add	r3, r6
 8003608:	9309      	str	r3, [sp, #36]	@ 0x24
 800360a:	e76a      	b.n	80034e2 <_svfiprintf_r+0x52>
 800360c:	460c      	mov	r4, r1
 800360e:	2001      	movs	r0, #1
 8003610:	fb0c 3202 	mla	r2, ip, r2, r3
 8003614:	e7a8      	b.n	8003568 <_svfiprintf_r+0xd8>
 8003616:	2300      	movs	r3, #0
 8003618:	f04f 0c0a 	mov.w	ip, #10
 800361c:	4619      	mov	r1, r3
 800361e:	3401      	adds	r4, #1
 8003620:	9305      	str	r3, [sp, #20]
 8003622:	4620      	mov	r0, r4
 8003624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003628:	3a30      	subs	r2, #48	@ 0x30
 800362a:	2a09      	cmp	r2, #9
 800362c:	d903      	bls.n	8003636 <_svfiprintf_r+0x1a6>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0c6      	beq.n	80035c0 <_svfiprintf_r+0x130>
 8003632:	9105      	str	r1, [sp, #20]
 8003634:	e7c4      	b.n	80035c0 <_svfiprintf_r+0x130>
 8003636:	4604      	mov	r4, r0
 8003638:	2301      	movs	r3, #1
 800363a:	fb0c 2101 	mla	r1, ip, r1, r2
 800363e:	e7f0      	b.n	8003622 <_svfiprintf_r+0x192>
 8003640:	ab03      	add	r3, sp, #12
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	462a      	mov	r2, r5
 8003646:	4638      	mov	r0, r7
 8003648:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <_svfiprintf_r+0x1f4>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	f3af 8000 	nop.w
 8003650:	1c42      	adds	r2, r0, #1
 8003652:	4606      	mov	r6, r0
 8003654:	d1d6      	bne.n	8003604 <_svfiprintf_r+0x174>
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	065b      	lsls	r3, r3, #25
 800365a:	f53f af2d 	bmi.w	80034b8 <_svfiprintf_r+0x28>
 800365e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003660:	e72c      	b.n	80034bc <_svfiprintf_r+0x2c>
 8003662:	ab03      	add	r3, sp, #12
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	462a      	mov	r2, r5
 8003668:	4638      	mov	r0, r7
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <_svfiprintf_r+0x1f4>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	f000 f87d 	bl	800376c <_printf_i>
 8003672:	e7ed      	b.n	8003650 <_svfiprintf_r+0x1c0>
 8003674:	08004866 	.word	0x08004866
 8003678:	0800486c 	.word	0x0800486c
 800367c:	08004870 	.word	0x08004870
 8003680:	00000000 	.word	0x00000000
 8003684:	080033d9 	.word	0x080033d9

08003688 <_printf_common>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	4616      	mov	r6, r2
 800368e:	4698      	mov	r8, r3
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	690b      	ldr	r3, [r1, #16]
 8003694:	4607      	mov	r7, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfb8      	it	lt
 800369a:	4613      	movlt	r3, r2
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036a2:	460c      	mov	r4, r1
 80036a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036a8:	b10a      	cbz	r2, 80036ae <_printf_common+0x26>
 80036aa:	3301      	adds	r3, #1
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	6833      	ldrmi	r3, [r6, #0]
 80036b6:	3302      	addmi	r3, #2
 80036b8:	6033      	strmi	r3, [r6, #0]
 80036ba:	6825      	ldr	r5, [r4, #0]
 80036bc:	f015 0506 	ands.w	r5, r5, #6
 80036c0:	d106      	bne.n	80036d0 <_printf_common+0x48>
 80036c2:	f104 0a19 	add.w	sl, r4, #25
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	dc2b      	bgt.n	8003728 <_printf_common+0xa0>
 80036d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	3b00      	subs	r3, #0
 80036d8:	bf18      	it	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	0692      	lsls	r2, r2, #26
 80036de:	d430      	bmi.n	8003742 <_printf_common+0xba>
 80036e0:	4641      	mov	r1, r8
 80036e2:	4638      	mov	r0, r7
 80036e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036e8:	47c8      	blx	r9
 80036ea:	3001      	adds	r0, #1
 80036ec:	d023      	beq.n	8003736 <_printf_common+0xae>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	6922      	ldr	r2, [r4, #16]
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf14      	ite	ne
 80036fa:	2500      	movne	r5, #0
 80036fc:	6833      	ldreq	r3, [r6, #0]
 80036fe:	f04f 0600 	mov.w	r6, #0
 8003702:	bf08      	it	eq
 8003704:	68e5      	ldreq	r5, [r4, #12]
 8003706:	f104 041a 	add.w	r4, r4, #26
 800370a:	bf08      	it	eq
 800370c:	1aed      	subeq	r5, r5, r3
 800370e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	42b5      	cmp	r5, r6
 8003722:	d11a      	bne.n	800375a <_printf_common+0xd2>
 8003724:	2000      	movs	r0, #0
 8003726:	e008      	b.n	800373a <_printf_common+0xb2>
 8003728:	2301      	movs	r3, #1
 800372a:	4652      	mov	r2, sl
 800372c:	4641      	mov	r1, r8
 800372e:	4638      	mov	r0, r7
 8003730:	47c8      	blx	r9
 8003732:	3001      	adds	r0, #1
 8003734:	d103      	bne.n	800373e <_printf_common+0xb6>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373e:	3501      	adds	r5, #1
 8003740:	e7c1      	b.n	80036c6 <_printf_common+0x3e>
 8003742:	2030      	movs	r0, #48	@ 0x30
 8003744:	18e1      	adds	r1, r4, r3
 8003746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003750:	4422      	add	r2, r4
 8003752:	3302      	adds	r3, #2
 8003754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003758:	e7c2      	b.n	80036e0 <_printf_common+0x58>
 800375a:	2301      	movs	r3, #1
 800375c:	4622      	mov	r2, r4
 800375e:	4641      	mov	r1, r8
 8003760:	4638      	mov	r0, r7
 8003762:	47c8      	blx	r9
 8003764:	3001      	adds	r0, #1
 8003766:	d0e6      	beq.n	8003736 <_printf_common+0xae>
 8003768:	3601      	adds	r6, #1
 800376a:	e7d9      	b.n	8003720 <_printf_common+0x98>

0800376c <_printf_i>:
 800376c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	7e0f      	ldrb	r7, [r1, #24]
 8003772:	4691      	mov	r9, r2
 8003774:	2f78      	cmp	r7, #120	@ 0x78
 8003776:	4680      	mov	r8, r0
 8003778:	460c      	mov	r4, r1
 800377a:	469a      	mov	sl, r3
 800377c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800377e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003782:	d807      	bhi.n	8003794 <_printf_i+0x28>
 8003784:	2f62      	cmp	r7, #98	@ 0x62
 8003786:	d80a      	bhi.n	800379e <_printf_i+0x32>
 8003788:	2f00      	cmp	r7, #0
 800378a:	f000 80d3 	beq.w	8003934 <_printf_i+0x1c8>
 800378e:	2f58      	cmp	r7, #88	@ 0x58
 8003790:	f000 80ba 	beq.w	8003908 <_printf_i+0x19c>
 8003794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800379c:	e03a      	b.n	8003814 <_printf_i+0xa8>
 800379e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037a2:	2b15      	cmp	r3, #21
 80037a4:	d8f6      	bhi.n	8003794 <_printf_i+0x28>
 80037a6:	a101      	add	r1, pc, #4	@ (adr r1, 80037ac <_printf_i+0x40>)
 80037a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037ac:	08003805 	.word	0x08003805
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003795 	.word	0x08003795
 80037b8:	08003795 	.word	0x08003795
 80037bc:	08003795 	.word	0x08003795
 80037c0:	08003795 	.word	0x08003795
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003795 	.word	0x08003795
 80037cc:	08003795 	.word	0x08003795
 80037d0:	08003795 	.word	0x08003795
 80037d4:	08003795 	.word	0x08003795
 80037d8:	0800391b 	.word	0x0800391b
 80037dc:	08003843 	.word	0x08003843
 80037e0:	080038d5 	.word	0x080038d5
 80037e4:	08003795 	.word	0x08003795
 80037e8:	08003795 	.word	0x08003795
 80037ec:	0800393d 	.word	0x0800393d
 80037f0:	08003795 	.word	0x08003795
 80037f4:	08003843 	.word	0x08003843
 80037f8:	08003795 	.word	0x08003795
 80037fc:	08003795 	.word	0x08003795
 8003800:	080038dd 	.word	0x080038dd
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6032      	str	r2, [r6, #0]
 800380c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003814:	2301      	movs	r3, #1
 8003816:	e09e      	b.n	8003956 <_printf_i+0x1ea>
 8003818:	6833      	ldr	r3, [r6, #0]
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	1d19      	adds	r1, r3, #4
 800381e:	6031      	str	r1, [r6, #0]
 8003820:	0606      	lsls	r6, r0, #24
 8003822:	d501      	bpl.n	8003828 <_printf_i+0xbc>
 8003824:	681d      	ldr	r5, [r3, #0]
 8003826:	e003      	b.n	8003830 <_printf_i+0xc4>
 8003828:	0645      	lsls	r5, r0, #25
 800382a:	d5fb      	bpl.n	8003824 <_printf_i+0xb8>
 800382c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003830:	2d00      	cmp	r5, #0
 8003832:	da03      	bge.n	800383c <_printf_i+0xd0>
 8003834:	232d      	movs	r3, #45	@ 0x2d
 8003836:	426d      	negs	r5, r5
 8003838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800383c:	230a      	movs	r3, #10
 800383e:	4859      	ldr	r0, [pc, #356]	@ (80039a4 <_printf_i+0x238>)
 8003840:	e011      	b.n	8003866 <_printf_i+0xfa>
 8003842:	6821      	ldr	r1, [r4, #0]
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	0608      	lsls	r0, r1, #24
 8003848:	f853 5b04 	ldr.w	r5, [r3], #4
 800384c:	d402      	bmi.n	8003854 <_printf_i+0xe8>
 800384e:	0649      	lsls	r1, r1, #25
 8003850:	bf48      	it	mi
 8003852:	b2ad      	uxthmi	r5, r5
 8003854:	2f6f      	cmp	r7, #111	@ 0x6f
 8003856:	6033      	str	r3, [r6, #0]
 8003858:	bf14      	ite	ne
 800385a:	230a      	movne	r3, #10
 800385c:	2308      	moveq	r3, #8
 800385e:	4851      	ldr	r0, [pc, #324]	@ (80039a4 <_printf_i+0x238>)
 8003860:	2100      	movs	r1, #0
 8003862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003866:	6866      	ldr	r6, [r4, #4]
 8003868:	2e00      	cmp	r6, #0
 800386a:	bfa8      	it	ge
 800386c:	6821      	ldrge	r1, [r4, #0]
 800386e:	60a6      	str	r6, [r4, #8]
 8003870:	bfa4      	itt	ge
 8003872:	f021 0104 	bicge.w	r1, r1, #4
 8003876:	6021      	strge	r1, [r4, #0]
 8003878:	b90d      	cbnz	r5, 800387e <_printf_i+0x112>
 800387a:	2e00      	cmp	r6, #0
 800387c:	d04b      	beq.n	8003916 <_printf_i+0x1aa>
 800387e:	4616      	mov	r6, r2
 8003880:	fbb5 f1f3 	udiv	r1, r5, r3
 8003884:	fb03 5711 	mls	r7, r3, r1, r5
 8003888:	5dc7      	ldrb	r7, [r0, r7]
 800388a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800388e:	462f      	mov	r7, r5
 8003890:	42bb      	cmp	r3, r7
 8003892:	460d      	mov	r5, r1
 8003894:	d9f4      	bls.n	8003880 <_printf_i+0x114>
 8003896:	2b08      	cmp	r3, #8
 8003898:	d10b      	bne.n	80038b2 <_printf_i+0x146>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	07df      	lsls	r7, r3, #31
 800389e:	d508      	bpl.n	80038b2 <_printf_i+0x146>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	6861      	ldr	r1, [r4, #4]
 80038a4:	4299      	cmp	r1, r3
 80038a6:	bfde      	ittt	le
 80038a8:	2330      	movle	r3, #48	@ 0x30
 80038aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b2:	1b92      	subs	r2, r2, r6
 80038b4:	6122      	str	r2, [r4, #16]
 80038b6:	464b      	mov	r3, r9
 80038b8:	4621      	mov	r1, r4
 80038ba:	4640      	mov	r0, r8
 80038bc:	f8cd a000 	str.w	sl, [sp]
 80038c0:	aa03      	add	r2, sp, #12
 80038c2:	f7ff fee1 	bl	8003688 <_printf_common>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d14a      	bne.n	8003960 <_printf_i+0x1f4>
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295
 80038ce:	b004      	add	sp, #16
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	2778      	movs	r7, #120	@ 0x78
 80038de:	4832      	ldr	r0, [pc, #200]	@ (80039a8 <_printf_i+0x23c>)
 80038e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	6831      	ldr	r1, [r6, #0]
 80038e8:	061f      	lsls	r7, r3, #24
 80038ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80038ee:	d402      	bmi.n	80038f6 <_printf_i+0x18a>
 80038f0:	065f      	lsls	r7, r3, #25
 80038f2:	bf48      	it	mi
 80038f4:	b2ad      	uxthmi	r5, r5
 80038f6:	6031      	str	r1, [r6, #0]
 80038f8:	07d9      	lsls	r1, r3, #31
 80038fa:	bf44      	itt	mi
 80038fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003900:	6023      	strmi	r3, [r4, #0]
 8003902:	b11d      	cbz	r5, 800390c <_printf_i+0x1a0>
 8003904:	2310      	movs	r3, #16
 8003906:	e7ab      	b.n	8003860 <_printf_i+0xf4>
 8003908:	4826      	ldr	r0, [pc, #152]	@ (80039a4 <_printf_i+0x238>)
 800390a:	e7e9      	b.n	80038e0 <_printf_i+0x174>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f023 0320 	bic.w	r3, r3, #32
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	e7f6      	b.n	8003904 <_printf_i+0x198>
 8003916:	4616      	mov	r6, r2
 8003918:	e7bd      	b.n	8003896 <_printf_i+0x12a>
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	6825      	ldr	r5, [r4, #0]
 800391e:	1d18      	adds	r0, r3, #4
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	6030      	str	r0, [r6, #0]
 8003924:	062e      	lsls	r6, r5, #24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	d501      	bpl.n	800392e <_printf_i+0x1c2>
 800392a:	6019      	str	r1, [r3, #0]
 800392c:	e002      	b.n	8003934 <_printf_i+0x1c8>
 800392e:	0668      	lsls	r0, r5, #25
 8003930:	d5fb      	bpl.n	800392a <_printf_i+0x1be>
 8003932:	8019      	strh	r1, [r3, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	4616      	mov	r6, r2
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	e7bc      	b.n	80038b6 <_printf_i+0x14a>
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	2100      	movs	r1, #0
 8003940:	1d1a      	adds	r2, r3, #4
 8003942:	6032      	str	r2, [r6, #0]
 8003944:	681e      	ldr	r6, [r3, #0]
 8003946:	6862      	ldr	r2, [r4, #4]
 8003948:	4630      	mov	r0, r6
 800394a:	f000 f859 	bl	8003a00 <memchr>
 800394e:	b108      	cbz	r0, 8003954 <_printf_i+0x1e8>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	2300      	movs	r3, #0
 800395a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800395e:	e7aa      	b.n	80038b6 <_printf_i+0x14a>
 8003960:	4632      	mov	r2, r6
 8003962:	4649      	mov	r1, r9
 8003964:	4640      	mov	r0, r8
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	47d0      	blx	sl
 800396a:	3001      	adds	r0, #1
 800396c:	d0ad      	beq.n	80038ca <_printf_i+0x15e>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	d413      	bmi.n	800399c <_printf_i+0x230>
 8003974:	68e0      	ldr	r0, [r4, #12]
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	4298      	cmp	r0, r3
 800397a:	bfb8      	it	lt
 800397c:	4618      	movlt	r0, r3
 800397e:	e7a6      	b.n	80038ce <_printf_i+0x162>
 8003980:	2301      	movs	r3, #1
 8003982:	4632      	mov	r2, r6
 8003984:	4649      	mov	r1, r9
 8003986:	4640      	mov	r0, r8
 8003988:	47d0      	blx	sl
 800398a:	3001      	adds	r0, #1
 800398c:	d09d      	beq.n	80038ca <_printf_i+0x15e>
 800398e:	3501      	adds	r5, #1
 8003990:	68e3      	ldr	r3, [r4, #12]
 8003992:	9903      	ldr	r1, [sp, #12]
 8003994:	1a5b      	subs	r3, r3, r1
 8003996:	42ab      	cmp	r3, r5
 8003998:	dcf2      	bgt.n	8003980 <_printf_i+0x214>
 800399a:	e7eb      	b.n	8003974 <_printf_i+0x208>
 800399c:	2500      	movs	r5, #0
 800399e:	f104 0619 	add.w	r6, r4, #25
 80039a2:	e7f5      	b.n	8003990 <_printf_i+0x224>
 80039a4:	08004877 	.word	0x08004877
 80039a8:	08004888 	.word	0x08004888

080039ac <memmove>:
 80039ac:	4288      	cmp	r0, r1
 80039ae:	b510      	push	{r4, lr}
 80039b0:	eb01 0402 	add.w	r4, r1, r2
 80039b4:	d902      	bls.n	80039bc <memmove+0x10>
 80039b6:	4284      	cmp	r4, r0
 80039b8:	4623      	mov	r3, r4
 80039ba:	d807      	bhi.n	80039cc <memmove+0x20>
 80039bc:	1e43      	subs	r3, r0, #1
 80039be:	42a1      	cmp	r1, r4
 80039c0:	d008      	beq.n	80039d4 <memmove+0x28>
 80039c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ca:	e7f8      	b.n	80039be <memmove+0x12>
 80039cc:	4601      	mov	r1, r0
 80039ce:	4402      	add	r2, r0
 80039d0:	428a      	cmp	r2, r1
 80039d2:	d100      	bne.n	80039d6 <memmove+0x2a>
 80039d4:	bd10      	pop	{r4, pc}
 80039d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039de:	e7f7      	b.n	80039d0 <memmove+0x24>

080039e0 <_sbrk_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	2300      	movs	r3, #0
 80039e4:	4d05      	ldr	r5, [pc, #20]	@ (80039fc <_sbrk_r+0x1c>)
 80039e6:	4604      	mov	r4, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	602b      	str	r3, [r5, #0]
 80039ec:	f7fd fa26 	bl	8000e3c <_sbrk>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d102      	bne.n	80039fa <_sbrk_r+0x1a>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	b103      	cbz	r3, 80039fa <_sbrk_r+0x1a>
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	200006b0 	.word	0x200006b0

08003a00 <memchr>:
 8003a00:	4603      	mov	r3, r0
 8003a02:	b510      	push	{r4, lr}
 8003a04:	b2c9      	uxtb	r1, r1
 8003a06:	4402      	add	r2, r0
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	d101      	bne.n	8003a12 <memchr+0x12>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e003      	b.n	8003a1a <memchr+0x1a>
 8003a12:	7804      	ldrb	r4, [r0, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	428c      	cmp	r4, r1
 8003a18:	d1f6      	bne.n	8003a08 <memchr+0x8>
 8003a1a:	bd10      	pop	{r4, pc}

08003a1c <memcpy>:
 8003a1c:	440a      	add	r2, r1
 8003a1e:	4291      	cmp	r1, r2
 8003a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a24:	d100      	bne.n	8003a28 <memcpy+0xc>
 8003a26:	4770      	bx	lr
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a34:	d1f9      	bne.n	8003a2a <memcpy+0xe>
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <_realloc_r>:
 8003a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	4615      	mov	r5, r2
 8003a40:	460c      	mov	r4, r1
 8003a42:	b921      	cbnz	r1, 8003a4e <_realloc_r+0x16>
 8003a44:	4611      	mov	r1, r2
 8003a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	f7ff bc39 	b.w	80032c0 <_malloc_r>
 8003a4e:	b92a      	cbnz	r2, 8003a5c <_realloc_r+0x24>
 8003a50:	f7ff fbcc 	bl	80031ec <_free_r>
 8003a54:	2400      	movs	r4, #0
 8003a56:	4620      	mov	r0, r4
 8003a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a5c:	f000 f81a 	bl	8003a94 <_malloc_usable_size_r>
 8003a60:	4285      	cmp	r5, r0
 8003a62:	4606      	mov	r6, r0
 8003a64:	d802      	bhi.n	8003a6c <_realloc_r+0x34>
 8003a66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a6a:	d8f4      	bhi.n	8003a56 <_realloc_r+0x1e>
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f7ff fc26 	bl	80032c0 <_malloc_r>
 8003a74:	4607      	mov	r7, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0ec      	beq.n	8003a54 <_realloc_r+0x1c>
 8003a7a:	42b5      	cmp	r5, r6
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4621      	mov	r1, r4
 8003a80:	bf28      	it	cs
 8003a82:	4632      	movcs	r2, r6
 8003a84:	f7ff ffca 	bl	8003a1c <memcpy>
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f7ff fbae 	bl	80031ec <_free_r>
 8003a90:	463c      	mov	r4, r7
 8003a92:	e7e0      	b.n	8003a56 <_realloc_r+0x1e>

08003a94 <_malloc_usable_size_r>:
 8003a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a98:	1f18      	subs	r0, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bfbc      	itt	lt
 8003a9e:	580b      	ldrlt	r3, [r1, r0]
 8003aa0:	18c0      	addlt	r0, r0, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_init>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr

08003ab0 <_fini>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr
